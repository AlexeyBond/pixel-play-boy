                   ; /d/progs/sdcc/bin/as31.exe -l ./pixel_play_boy.a31
                   
                   
                   ;
                   ; STC15F2K60S2 specific definitions
                   ;
                   
                   
0000:              .equ    P0M0, 0x94
0000:              .equ    P0M1, 0x93
                   
0000:              .equ    P1M0, 0x92
0000:              .equ    P1M1, 0x91
                   
0000:              .equ    P2M0, 0x96
0000:              .equ    P2M1, 0x95
                   
0000:              .equ    P3M0, 0xB2
0000:              .equ    P3M1, 0xB1
                   
0000:              .equ    P4, 0xC0
0000:              .equ    P4M0, 0xB4
0000:              .equ    P4M1, 0xB3
                   
0000:              .equ    P5, 0xC8
0000:              .equ    P5M0, 0xCA
0000:              .equ    P5M1, 0xC9
                   
                   ; | T0x12 | T1x12 | UART_M0x6 | T2R | T2_C/~T | T2x12 | EXTR
0000:              .equ    AUXR,           0x8E
0000:              .equ    AUXR_T0x12,     (1 << 7)
0000:              .equ    AUXR_T2x12,     (1 << 2)
0000:              .equ    AUXR_T2R,       (1 << 4)
                   
                   ; | - | EX4 | EX3 | EX2 | - | T2CLKO | T1CLKO | T0CLKO |
0000:              .equ    INT_CLKO,       0x8F
0000:              .equ    INT_CLKO_T0CLKO,(1)
                   
                   ; | - | ET4 | ET3 | ES4 | ES3 | ET2 | ESPI | ES2 |
0000:              .equ    IE2,            0xAF
0000:              .equ    IE2_ET2,        (1 << 2)
0000:              .equ    IE2_ET3,        (1 << 5)
0000:              .equ    IE2_ET4,        (1 << 6)
                   
0000:              .equ    T2L,            0xD7
0000:              .equ    T2H,            0xD6
                   
                   
                   
                   
                   ;
                   ; Board layout definitions
                   ;
                   
                   
                   
0000:              .flag   BEEPER, P3.5        ; Beeper output, DIFFERENT FROM 
                   
                   ; Buttons
0000:              .flag BTN_UP,           P3.2
0000:              .flag BTN_DOWN,         P3.6
0000:              .flag BTN_RIGHT,        P3.3
0000:              .flag BTN_LEFT,         P3.0
0000:              .flag BTN_OK,           P3.7
                   
                   ; Display rows
0000:              .flag DISPLAY_R0,       P2.6
0000:              .flag DISPLAY_R1,       P4.5
0000:              .flag DISPLAY_R2,       P0.4
0000:              .flag DISPLAY_R3,       P2.7
0000:              .flag DISPLAY_R4,       P0.0
0000:              .flag DISPLAY_R5,       P0.3
0000:              .flag DISPLAY_R6,       P0.1
0000:              .flag DISPLAY_R7,       P0.2
0000:              .flag DISPLAY_R8,       P0.5
0000:              .flag DISPLAY_R9,       P0.7
0000:              .flag DISPLAY_R10,      P1.3
0000:              .flag DISPLAY_R11,      P0.6
0000:              .flag DISPLAY_R12,      P1.0
0000:              .flag DISPLAY_R13,      P1.2
0000:              .flag DISPLAY_R14,      P1.1
0000:              .flag DISPLAY_R15,      P1.6
                   
                   ; Display columns
0000:              .flag DISPLAY_C0,       P2.4
0000:              .flag DISPLAY_C1,       P2.0
0000:              .flag DISPLAY_C2,       P4.4
0000:              .flag DISPLAY_C3,       P2.1
0000:              .flag DISPLAY_C4,       P1.4
0000:              .flag DISPLAY_C5,       P2.2
0000:              .flag DISPLAY_C6,       P4.1
0000:              .flag DISPLAY_C7,       P1.5
                   
                   ; Display digits
0000:              .flag DISPLAY_D0,       P2.3
0000:              .flag DISPLAY_D1,       P2.5
0000:              .flag DISPLAY_D2,       P4.2
                   
                   ; Display digit segments (overlap with matrix columns)
0000:              .flag SMG_A,            P4.1
0000:              .flag SMG_B,            P2.4
0000:              .flag SMG_C,            P2.1
0000:              .flag SMG_D,            P2.0
0000:              .flag SMG_E,            P4.4
0000:              .flag SMG_F,            P2.2
0000:              .flag SMG_G,            P1.4
                   
0000:              .flag SMG_DP,           P1.5 ; Missing on original board
                   
                   
                   ;
                   ; 7-segment display definitions
                   ;
                   
0000:              .equ    SS_SEGN_A, 0
0000:              .equ    SS_SEGN_B, 1
0000:              .equ    SS_SEGN_C, 2
0000:              .equ    SS_SEGN_D, 3
0000:              .equ    SS_SEGN_E, 4
0000:              .equ    SS_SEGN_F, 5
0000:              .equ    SS_SEGN_G, 6
                   
0000:              .equ    SS_SEGN_DP, 7
                   
0000:              .equ    SS_SEGB_A, (1 << SS_SEGN_A)
0000:              .equ    SS_SEGB_B, (1 << SS_SEGN_B)
0000:              .equ    SS_SEGB_C, (1 << SS_SEGN_C)
0000:              .equ    SS_SEGB_D, (1 << SS_SEGN_D)
0000:              .equ    SS_SEGB_E, (1 << SS_SEGN_E)
0000:              .equ    SS_SEGB_F, (1 << SS_SEGN_F)
0000:              .equ    SS_SEGB_G, (1 << SS_SEGN_G)
                   
0000:              .equ    SS_SEGB_DP, (1 << SS_SEGN_DP)
                   
0000:              .equ    SS_CHR_0, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_1, SS_SEGB_B | SS_SEGB_C
0000:              .equ    SS_CHR_2, SS_SEGB_A | SS_SEGB_B | SS_SEGB_G | SS_SEG
0000:              .equ    SS_CHR_3, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_4, SS_SEGB_B | SS_SEGB_C | SS_SEGB_F | SS_SEG
0000:              .equ    SS_CHR_5, SS_SEGB_A | SS_SEGB_F | SS_SEGB_G | SS_SEG
0000:              .equ    SS_CHR_6, SS_SEGB_A | SS_SEGB_F | SS_SEGB_G | SS_SEG
0000:              .equ    SS_CHR_7, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C
0000:              .equ    SS_CHR_8, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_9, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
                   
0000:              .equ    SS_CHR_MINUS, SS_SEGB_G
                   
0000:              .equ    SS_CHR_A, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_B, SS_SEGB_C | SS_SEGB_D | SS_SEGB_F | SS_SEG
0000:              .equ    SS_CHR_C_UP, SS_SEGB_A | SS_SEGB_D | SS_SEGB_E | SS_
0000:              .equ    SS_CHR_C_LOW, SS_SEGB_D | SS_SEGB_E | SS_SEGB_G
0000:              .equ    SS_CHR_D, SS_SEGB_B | SS_SEGB_C | SS_SEGB_D | SS_SEG
0000:              .equ    SS_CHR_E, SS_SEGB_A | SS_SEGB_D | SS_SEGB_E | SS_SEG
0000:              .equ    SS_CHR_F, SS_SEGB_A | SS_SEGB_E | SS_SEGB_F | SS_SEG
0000:              .equ    SS_CHR_G, SS_SEGB_A | SS_SEGB_C | SS_SEGB_D | SS_SEG
                   
0000:              .equ    SS_CHR_O_UP, SS_CHR_0
0000:              .equ    SS_CHR_O_LOW, SS_SEGB_C | SS_SEGB_D | SS_SEGB_E | SS
0000:              .equ    SS_CHR_U_UP, SS_SEGB_B | SS_SEGB_C | SS_SEGB_D | SS_
0000:              .equ    SS_CHR_U_LOW, SS_SEGB_C | SS_SEGB_D | SS_SEGB_E
                   
                   ;
                   ; Memory layout
                   ;
                   
0000:              .equ    stack_bottom, 0x7f                      ; Stack take
                   
                   ; Variables
                   
0000:              .equ    tempo_tick, stack_bottom                ; Tempo tick
                   
0000:              .equ    display_coro_pch, tempo_tick - 1        ; Display co
0000:              .equ    display_coro_pcl, display_coro_pch - 1
                   
0000:              .equ    ss_anim_value_2, display_coro_pcl - 1   ; Characters
0000:              .equ    ss_anim_value_1, ss_anim_value_2 - 1
0000:              .equ    ss_anim_value_0, ss_anim_value_1 - 1
                   
0000:              .equ    seq_notes, ss_anim_value_0 - 16         ; Current se
                                                                   ; 16 notes, 
                                                                   ; where 0 is
                   
0000:              .equ    seq_cursor, seq_notes - 1               ; Index of c
0000:              .equ    seq_edit_cursor, seq_cursor - 1         ; Index of c
                                                                   ; Outside of
0000:              .equ    display_blink_cnt, seq_edit_cursor - 1  ; Cursor bli
                   
0000:              .equ    btns_denoise_buffer, display_blink_cnt - 4  ; A buff
                   
0000:              .equ    anim_counter, btns_denoise_buffer - 1   ; Animation 
0000:              .equ    anim_ptr, anim_counter - 1
                   
0000:              .equ    ss_menu_value_2, anim_ptr - 1           ; Characters
0000:              .equ    ss_menu_value_1, ss_menu_value_2 - 1
0000:              .equ    ss_menu_value_0, ss_menu_value_1 - 1
                   
0000:              .equ    tempo_index, ss_menu_value_0 - 1        ; Tempo inde
                   
                   
                   
                   ; Bit-addressable variables
                   
0000:              .equ    aux_bits, 0x2F                          ; Highest bi
                   
0000:              .flag   display_blink_on, aux_bits.0            ; If blinkin
0000:              .flag   display_ss_menu_mode, aux_bits.1        ; If true - 
                   
0000:              .equ    btns_pressed, aux_bits - 1              ; Buttons cu
                   
0000:              .flag   btn_pressed_ok, btns_pressed.0
0000:              .flag   btn_pressed_up, btns_pressed.1
0000:              .flag   btn_pressed_down, btns_pressed.2
0000:              .flag   btn_pressed_right, btns_pressed.3
0000:              .flag   btn_pressed_left, btns_pressed.4
                   
0000:              .equ    btns_just_pressed, btns_pressed - 1     ; Buttons pr
                   
0000:              .flag   btn_just_pressed_ok, btns_just_pressed.0
0000:              .flag   btn_just_pressed_up, btns_just_pressed.1
0000:              .flag   btn_just_pressed_down, btns_just_pressed.2
0000:              .flag   btn_just_pressed_right, btns_just_pressed.3
0000:              .flag   btn_just_pressed_left, btns_just_pressed.4
                   
                   ;
                   ; Interrupt handlers
                   ;
                   
                   
                   
0000:              .org 0x0000             ; Reset handler
0000: 02 00 7A         ljmp    main
                   
                   ;.org 0x000B             ; Timer 0 interrupt - not used, T0 
                   ;    cpl     BEEPER
                   ;    reti
                   
001B:              .org 0x001B             ; Timer 1 interrupt - triggered on e
001B: D5 7F 20         djnz    tempo_tick, _t1i_no_next_note   ; if (--tempo_ti
                   
001E: C0 E0            push    ACC
0020: C0 00            push    0
0022: C0 82            push    DPL
0024: C0 83            push    DPH
                   
0026: 12 01 89         lcall   tempo_reset_soft_counter
                   
0029: E5 69            mov     A, seq_cursor
002B: 04               inc     A
002C: 54 0F            anl     A, #0x0f
002E: F5 69            mov     seq_cursor, A
                   
0030: 12 03 E1         lcall   animation_frame
                   
0033: 12 04 13         lcall   setup_current_note
                   
                   
0036: D0 83            pop     DPH
0038: D0 82            pop     DPL
003A: D0 00            pop     0
003C: D0 E0            pop     ACC
                   _t1i_no_next_note:
003E: 32               reti
                   
0063:              .org 0x0063             ; Timer 2 interrupt - update display
0063: C0 E0            push    ACC
0065: C0 00            push    0
0067: C0 82            push    DPL
0069: C0 83            push    DPH
                   
006B: 12 03 46         lcall display_coro_run
006E: 12 03 0B         lcall input_check
                   
0071: D0 83            pop     DPH
0073: D0 82            pop     DPL
0075: D0 00            pop     0
0077: D0 E0            pop     ACC
0079: 32               reti
                   
                   
                   
                   
                   
                   ;
                   ; Entry point
                   ;
                   main:
                   
                   ; Hardware initialization
                   
                   ; Stack init
007A: 75 81 7F         mov     SP, #stack_bottom
                   
                   ; Tempo counter init
007D: 12 01 71         lcall   tempo_init
                   
                   ; Display setup
0080: 75 94 FF         mov     P0M0, #0xFF         ; set display pin modes to p
0083: 75 92 FF         mov     P1M0, #0xFF
0086: 75 96 FF         mov     P2M0, #0xFF
0089: 75 B4 FF         mov     P4M0, #0xFF
008C: 12 03 50         lcall display_coro_start    ; start display coroutine
008F: 75 D6 FE         mov     T2H, #0xFE          ; start display timer (T2)
0092: 75 D7 00         mov     T2L, #0
0095: 43 8E 10         orl     AUXR, #AUXR_T2R
0098: 43 AF 04         orl     IE2, #IE2_ET2
                   
009B: 12 03 DC         lcall   animation_init
                   
                   ; Sequence setup
009E: 75 6A 01         mov     (seq_notes + 0), #1
00A1: 75 6B 02         mov     (seq_notes + 1), #2
00A4: 75 6C 03         mov     (seq_notes + 2), #3
00A7: 75 6D 04         mov     (seq_notes + 3), #4
00AA: 75 6E 05         mov     (seq_notes + 4), #5
00AD: 75 6F 06         mov     (seq_notes + 5), #6
00B0: 75 70 07         mov     (seq_notes + 6), #7
00B3: 75 71 00         mov     (seq_notes + 7), #0
00B6: 75 72 01         mov     (seq_notes + 8), #1
00B9: 75 73 02         mov     (seq_notes + 9), #2
00BC: 75 74 03         mov     (seq_notes + 10), #3
00BF: 75 75 04         mov     (seq_notes + 11), #4
00C2: 75 76 05         mov     (seq_notes + 12), #5
00C5: 75 77 06         mov     (seq_notes + 13), #6
00C8: 75 78 07         mov     (seq_notes + 14), #7
00CB: 75 79 00         mov     (seq_notes + 15), #0
                   
00CE: 75 69 00         mov     seq_cursor, #0
00D1: 75 68 02         mov     seq_edit_cursor, #2
                   
00D4: 12 04 13         lcall   setup_current_note
                   
                   ;
00D7: D2 AF            setb    EA          ; Enable interrupts
                       
00D9: 80 00            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes:
00DB: 53 68 0F         anl     seq_edit_cursor, #0x0F
00DE: C2 79            clr     display_ss_menu_mode
00E0: C2 68            clr     btn_just_pressed_ok
                   
                   interaction_edit_notes_loop:
00E2: 20 69 0E         jb      btn_just_pressed_up, interaction_edit_notes_curs
00E5: 20 6A 16         jb      btn_just_pressed_down, interaction_edit_notes_cu
00E8: 20 6B 1E         jb      btn_just_pressed_right, interaction_edit_notes_n
00EB: 20 6C 29         jb      btn_just_pressed_left, interaction_edit_notes_no
00EE: 20 68 34         jb      btn_just_pressed_ok, interaction_edit_tempo
00F1: 80 EF            sjmp    interaction_edit_notes_loop
                   
                   interaction_edit_notes_cursor_up:
00F3: C2 69            clr     btn_just_pressed_up
00F5: E5 68            mov     A, seq_edit_cursor
00F7: 14               dec     A
00F8: 54 0F            anl     A, #0x0f
00FA: F5 68            mov     seq_edit_cursor, A
00FC: 80 DD            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_cursor_down:
00FE: C2 6A            clr     btn_just_pressed_down
0100: E5 68            mov     A, seq_edit_cursor
0102: 04               inc     A
0103: 54 0F            anl     A, #0x0f
0105: F5 68            mov     seq_edit_cursor, A
0107: 80 D2            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_note_up:
0109: C2 6B            clr     btn_just_pressed_right
010B: E5 68            mov     A, seq_edit_cursor
010D: 24 6A            add     A, #seq_notes
010F: F8               mov     R0, A
0110: E6               mov     A, @R0
0111: 04               inc     A
0112: 54 07            anl     A, #0x07
0114: F6               mov     @R0, A
0115: 80 C4            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_note_down:
0117: C2 6C            clr     btn_just_pressed_left
0119: E5 68            mov     A, seq_edit_cursor
011B: 24 6A            add     A, #seq_notes
011D: F8               mov     R0, A
011E: E6               mov     A, @R0
011F: 14               dec     A
0120: 54 07            anl     A, #0x07
0122: F6               mov     @R0, A
0123: 80 B6            sjmp    interaction_edit_notes
                   
                   
                   
                   interaction_edit_tempo:
0125: C2 68            clr     btn_just_pressed_ok
0127: D2 79            setb    display_ss_menu_mode
0129: 43 68 10         orl     seq_edit_cursor, #0x10
                   
012C: 90 05 61         mov     DPTR, #tempo_table_ss_0
012F: E5 5D            mov     A, tempo_index
0131: 93               movc    A, @A + DPTR
0132: F5 5E            mov     ss_menu_value_0, A
                   
0134: 90 05 68         mov     DPTR, #tempo_table_ss_1
0137: E5 5D            mov     A, tempo_index
0139: 93               movc    A, @A + DPTR
013A: F5 5F            mov     ss_menu_value_1, A
                   
013C: 90 05 6F         mov     DPTR, #tempo_table_ss_2
013F: E5 5D            mov     A, tempo_index
0141: 93               movc    A, @A + DPTR
0142: F5 60            mov     ss_menu_value_2, A
                   
                   interaction_edit_tempo_loop:
0144: 20 69 08         jb      btn_just_pressed_up, interaction_edit_tempo_up
0147: 20 6A 16         jb      btn_just_pressed_down, interaction_edit_tempo_do
014A: 20 68 8E         jb      btn_just_pressed_ok, interaction_edit_notes
014D: 80 F5            sjmp    interaction_edit_tempo_loop
                   
                   interaction_edit_tempo_up:
014F: C2 69            clr     btn_just_pressed_up
0151: E5 5D            mov     A, tempo_index
0153: B4 06 02         cjne    A, #tempo_max_index, _interaction_edit_tempo_up_
0156: 80 EC            sjmp    interaction_edit_tempo_loop
                   _interaction_edit_tempo_up_inc:
0158: 04               inc     A
0159: F5 5D            mov     tempo_index, A
015B: 12 01 79         lcall   tempo_setup_current
015E: 80 C5            sjmp    interaction_edit_tempo
                   
                   interaction_edit_tempo_down:
0160: C2 6A            clr     btn_just_pressed_down
0162: E5 5D            mov     A, tempo_index
0164: B4 00 02         cjne    A, #0, _interaction_edit_tempo_down_dec
0167: 80 DB            sjmp    interaction_edit_tempo_loop
                   _interaction_edit_tempo_down_dec:
0169: 14               dec     A
016A: F5 5D            mov     tempo_index, A
016C: 12 01 79         lcall   tempo_setup_current
016F: 80 B4            sjmp    interaction_edit_tempo
                   
                   
                   
                   ;
                   ; Tempo timer subroutines
                   ;
                   
                   tempo_init:
0171: 85 04 5D         mov     tempo_index, tempo_initial_index
0174: 43 A8 08         orl     IE, #(1 << 3)
0177: D2 8E            setb    TR1
                   
                   tempo_setup_current:
0179: 90 05 4C         mov     DPTR, #tempo_table_th
017C: E5 5D            mov     A, tempo_index
017E: 93               movc    A, @A + DPTR
017F: F5 8D            mov     TH1, A
                   
0181: 90 05 53         mov     DPTR, #tempo_table_tl
0184: E5 5D            mov     A, tempo_index
0186: 93               movc    A, @A + DPTR
0187: F5 8B            mov     TL1, A
                   
                   tempo_reset_soft_counter:
0189: 90 05 5A         mov     DPTR, #tempo_table_sd
018C: E5 5D            mov     A, tempo_index
018E: 93               movc    A, @A + DPTR
018F: F5 7F            mov     tempo_tick, A
                   
0191: 22               ret
                   
                   
                   ;
                   ; Display control subroutines
                   ;
                   
                   
                   
                   
                   
                   ; Enable display row determined by A
                   ; UB if A >= 16
                   ; Uses A, DPTR
                   display_row_on:
0192: 90 01 98         mov     DPTR, #display_row_on_tab
0195: 23               rl      A
0196: 23               rl      A
0197: 73               jmp     @A + DPTR   ; jmp display_row_on_tab + row * 4
                   display_row_on_tab:
0198: D2 A6            setb    DISPLAY_R0
019A: 22               ret
                   ; print('\n'.join(f".org display_row_on_tab + (4 * {i})\n   
019C:              .org display_row_on_tab + (4 * 1)
019C: D2 C5            setb DISPLAY_R1
019E: 22               ret
01A0:              .org display_row_on_tab + (4 * 2)
01A0: D2 84            setb DISPLAY_R2
01A2: 22               ret
01A4:              .org display_row_on_tab + (4 * 3)
01A4: D2 A7            setb DISPLAY_R3
01A6: 22               ret
01A8:              .org display_row_on_tab + (4 * 4)
01A8: D2 80            setb DISPLAY_R4
01AA: 22               ret
01AC:              .org display_row_on_tab + (4 * 5)
01AC: D2 83            setb DISPLAY_R5
01AE: 22               ret
01B0:              .org display_row_on_tab + (4 * 6)
01B0: D2 81            setb DISPLAY_R6
01B2: 22               ret
01B4:              .org display_row_on_tab + (4 * 7)
01B4: D2 82            setb DISPLAY_R7
01B6: 22               ret
01B8:              .org display_row_on_tab + (4 * 8)
01B8: D2 85            setb DISPLAY_R8
01BA: 22               ret
01BC:              .org display_row_on_tab + (4 * 9)
01BC: D2 87            setb DISPLAY_R9
01BE: 22               ret
01C0:              .org display_row_on_tab + (4 * 10)
01C0: D2 93            setb DISPLAY_R10
01C2: 22               ret
01C4:              .org display_row_on_tab + (4 * 11)
01C4: D2 86            setb DISPLAY_R11
01C6: 22               ret
01C8:              .org display_row_on_tab + (4 * 12)
01C8: D2 90            setb DISPLAY_R12
01CA: 22               ret
01CC:              .org display_row_on_tab + (4 * 13)
01CC: D2 92            setb DISPLAY_R13
01CE: 22               ret
01D0:              .org display_row_on_tab + (4 * 14)
01D0: D2 91            setb DISPLAY_R14
01D2: 22               ret
01D4:              .org display_row_on_tab + (4 * 15)
01D4: D2 96            setb DISPLAY_R15
01D6: 22               ret
                   
                   ; Disable display row determined by A
                   ; UB if A >= 16
                   ; Uses A, DPTR
                   display_row_off:
01D7: 90 01 DD         mov     DPTR, #display_row_off_tab
01DA: 23               rl      A
01DB: 23               rl      A
01DC: 73               jmp     @A + DPTR   ; jmp display_row_off_tab + row * 4
                   display_row_off_tab:
01DD: C2 A6            clr     DISPLAY_R0
01DF: 22               ret
                   ; print('\n'.join(f".org display_row_off_tab + (4 * {i})\n  
01E1:              .org display_row_off_tab + (4 * 1)
01E1: C2 C5            clr DISPLAY_R1
01E3: 22               ret
01E5:              .org display_row_off_tab + (4 * 2)
01E5: C2 84            clr DISPLAY_R2
01E7: 22               ret
01E9:              .org display_row_off_tab + (4 * 3)
01E9: C2 A7            clr DISPLAY_R3
01EB: 22               ret
01ED:              .org display_row_off_tab + (4 * 4)
01ED: C2 80            clr DISPLAY_R4
01EF: 22               ret
01F1:              .org display_row_off_tab + (4 * 5)
01F1: C2 83            clr DISPLAY_R5
01F3: 22               ret
01F5:              .org display_row_off_tab + (4 * 6)
01F5: C2 81            clr DISPLAY_R6
01F7: 22               ret
01F9:              .org display_row_off_tab + (4 * 7)
01F9: C2 82            clr DISPLAY_R7
01FB: 22               ret
01FD:              .org display_row_off_tab + (4 * 8)
01FD: C2 85            clr DISPLAY_R8
01FF: 22               ret
0201:              .org display_row_off_tab + (4 * 9)
0201: C2 87            clr DISPLAY_R9
0203: 22               ret
0205:              .org display_row_off_tab + (4 * 10)
0205: C2 93            clr DISPLAY_R10
0207: 22               ret
0209:              .org display_row_off_tab + (4 * 11)
0209: C2 86            clr DISPLAY_R11
020B: 22               ret
020D:              .org display_row_off_tab + (4 * 12)
020D: C2 90            clr DISPLAY_R12
020F: 22               ret
0211:              .org display_row_off_tab + (4 * 13)
0211: C2 92            clr DISPLAY_R13
0213: 22               ret
0215:              .org display_row_off_tab + (4 * 14)
0215: C2 91            clr DISPLAY_R14
0217: 22               ret
0219:              .org display_row_off_tab + (4 * 15)
0219: C2 96            clr DISPLAY_R15
021B: 22               ret
                   
                   ; Enable column determined by A
                   ; UB if A >= 8
                   ; Uses A, DPTR
                   display_col_on:
021C: 90 02 22         mov     DPTR, #display_col_on_tab
021F: 23               rl      A
0220: 23               rl      A
0221: 73               jmp     @A + DPTR
                   display_col_on_tab:
0222: C2 A4            clr     DISPLAY_C0              ; Columns are negative
0224: 22               ret
                   ; print('\n'.join(f".org display_col_on_tab + (4 * {i})\n   
0226:              .org display_col_on_tab + (4 * 1)
0226: C2 A0            clr DISPLAY_C1
0228: 22               ret
022A:              .org display_col_on_tab + (4 * 2)
022A: C2 C4            clr DISPLAY_C2
022C: 22               ret
022E:              .org display_col_on_tab + (4 * 3)
022E: C2 A1            clr DISPLAY_C3
0230: 22               ret
0232:              .org display_col_on_tab + (4 * 4)
0232: C2 94            clr DISPLAY_C4
0234: 22               ret
0236:              .org display_col_on_tab + (4 * 5)
0236: C2 A2            clr DISPLAY_C5
0238: 22               ret
023A:              .org display_col_on_tab + (4 * 6)
023A: C2 C1            clr DISPLAY_C6
023C: 22               ret
023E:              .org display_col_on_tab + (4 * 7)
023E: C2 95            clr DISPLAY_C7
0240: 22               ret
                   
                   display_col_off:
0241: 90 02 47         mov     DPTR, #display_col_off_tab
0244: 23               rl      A
0245: 23               rl      A
0246: 73               jmp     @A + DPTR
                   display_col_off_tab:
0247: D2 A4            setb    DISPLAY_C0              ; Columns are negative
0249: 22               ret
                   ; print('\n'.join(f".org display_col_off_tab + (4 * {i})\n  
024B:              .org display_col_off_tab + (4 * 1)
024B: D2 A0            setb DISPLAY_C1
024D: 22               ret
024F:              .org display_col_off_tab + (4 * 2)
024F: D2 C4            setb DISPLAY_C2
0251: 22               ret
0253:              .org display_col_off_tab + (4 * 3)
0253: D2 A1            setb DISPLAY_C3
0255: 22               ret
0257:              .org display_col_off_tab + (4 * 4)
0257: D2 94            setb DISPLAY_C4
0259: 22               ret
025B:              .org display_col_off_tab + (4 * 5)
025B: D2 A2            setb DISPLAY_C5
025D: 22               ret
025F:              .org display_col_off_tab + (4 * 6)
025F: D2 C1            setb DISPLAY_C6
0261: 22               ret
0263:              .org display_col_off_tab + (4 * 7)
0263: D2 95            setb DISPLAY_C7
0265: 22               ret
                   
                   ; Disable all columns
                   display_col_off_all:
0266: D2 A4            setb    DISPLAY_C0
0268: D2 A0            setb    DISPLAY_C1
026A: D2 C4            setb    DISPLAY_C2
026C: D2 A1            setb    DISPLAY_C3
026E: D2 94            setb    DISPLAY_C4
0270: D2 A2            setb    DISPLAY_C5
0272: D2 C1            setb    DISPLAY_C6
0274: D2 95            setb    DISPLAY_C7
0276: 22               ret
                   
                   ; Disable all rows
                   display_row_off_all:
0277: C2 A6            clr     DISPLAY_R0
0279: C2 C5            clr     DISPLAY_R1
027B: C2 84            clr     DISPLAY_R2
027D: C2 A7            clr     DISPLAY_R3
027F: C2 80            clr     DISPLAY_R4
0281: C2 83            clr     DISPLAY_R5
0283: C2 81            clr     DISPLAY_R6
0285: C2 82            clr     DISPLAY_R7
0287: C2 85            clr     DISPLAY_R8
0289: C2 87            clr     DISPLAY_R9
028B: C2 93            clr     DISPLAY_R10
028D: C2 86            clr     DISPLAY_R11
028F: C2 90            clr     DISPLAY_R12
0291: C2 92            clr     DISPLAY_R13
0293: C2 91            clr     DISPLAY_R14
0295: C2 96            clr     DISPLAY_R15
0297: 22               ret
                   
                   ; Enable a segment of 7-segment display determined by A
                   ; UB if A >= 8
                   ; Uses A, DPTR
                   display_ss_segment_on:
0298: 90 02 9E         mov     DPTR, #display_ss_segment_on_tab
029B: 23               rl      A
029C: 23               rl      A
029D: 73               jmp     @A + DPTR
                   display_ss_segment_on_tab:
                   ; print('\n'.join(f".org display_ss_segment_on_tab + (4 * SS
029E:              .org display_ss_segment_on_tab + (4 * SS_SEGN_A)
029E: D2 C1            setb SMG_A
02A0: 22               ret
02A2:              .org display_ss_segment_on_tab + (4 * SS_SEGN_B)
02A2: D2 A4            setb SMG_B
02A4: 22               ret
02A6:              .org display_ss_segment_on_tab + (4 * SS_SEGN_C)
02A6: D2 A1            setb SMG_C
02A8: 22               ret
02AA:              .org display_ss_segment_on_tab + (4 * SS_SEGN_D)
02AA: D2 A0            setb SMG_D
02AC: 22               ret
02AE:              .org display_ss_segment_on_tab + (4 * SS_SEGN_E)
02AE: D2 C4            setb SMG_E
02B0: 22               ret
02B2:              .org display_ss_segment_on_tab + (4 * SS_SEGN_F)
02B2: D2 A2            setb SMG_F
02B4: 22               ret
02B6:              .org display_ss_segment_on_tab + (4 * SS_SEGN_G)
02B6: D2 94            setb SMG_G
02B8: 22               ret
02BA:              .org display_ss_segment_on_tab + (4 * SS_SEGN_DP)
02BA: D2 95            setb SMG_DP
02BC: 22               ret
                   
                   ; Disable a segment of 7-segment display determined by A
                   ; UB if A >= 8
                   ; Uses A, DPTR
                   display_ss_segment_off:
02BD: 90 02 C3         mov     DPTR, #display_ss_segment_off_tab
02C0: 23               rl      A
02C1: 23               rl      A
02C2: 73               jmp     @A + DPTR
                   display_ss_segment_off_tab:
                   ; print('\n'.join(f".org display_ss_segment_off_tab + (4 * S
02C3:              .org display_ss_segment_off_tab + (4 * SS_SEGN_A)
02C3: C2 C1            clr SMG_A
02C5: 22               ret
02C7:              .org display_ss_segment_off_tab + (4 * SS_SEGN_B)
02C7: C2 A4            clr SMG_B
02C9: 22               ret
02CB:              .org display_ss_segment_off_tab + (4 * SS_SEGN_C)
02CB: C2 A1            clr SMG_C
02CD: 22               ret
02CF:              .org display_ss_segment_off_tab + (4 * SS_SEGN_D)
02CF: C2 A0            clr SMG_D
02D1: 22               ret
02D3:              .org display_ss_segment_off_tab + (4 * SS_SEGN_E)
02D3: C2 C4            clr SMG_E
02D5: 22               ret
02D7:              .org display_ss_segment_off_tab + (4 * SS_SEGN_F)
02D7: C2 A2            clr SMG_F
02D9: 22               ret
02DB:              .org display_ss_segment_off_tab + (4 * SS_SEGN_G)
02DB: C2 94            clr SMG_G
02DD: 22               ret
02DF:              .org display_ss_segment_off_tab + (4 * SS_SEGN_DP)
02DF: C2 95            clr SMG_DP
02E1: 22               ret
                   
                   ; Disable all 7-segment display segments
                   display_ss_segment_off_all:
02E2: C2 C1            clr SMG_A
02E4: C2 A4            clr SMG_B
02E6: C2 A1            clr SMG_C
02E8: C2 A0            clr SMG_D
02EA: C2 C4            clr SMG_E
02EC: C2 A2            clr SMG_F
02EE: C2 94            clr SMG_G
02F0: C2 95            clr SMG_DP
02F2: 22               ret
                   
                   ; Disable all 7-segment display digits
                   display_ss_digit_off_all:
02F3: D2 A3            setb    DISPLAY_D0
02F5: D2 A5            setb    DISPLAY_D1
02F7: D2 C2            setb    DISPLAY_D2
02F9: 22               ret
                   
                   ; Enable a 7-segment digit determined by A
                   ; UB if A >= 3
                   ; Uses A, DPTR
                   display_ss_digit_on:
02FA: 90 03 00         mov     DPTR, #display_ss_digit_on_tab
02FD: 23               rl      A
02FE: 23               rl      A
02FF: 73               jmp     @A + DPTR
                   display_ss_digit_on_tab:
                   ; print('\n'.join(f".org display_ss_digit_on_tab + (4 * {i})
0300:              .org display_ss_digit_on_tab + (4 * 0)
0300: C2 A3            clr DISPLAY_D0
0302: 22               ret
0304:              .org display_ss_digit_on_tab + (4 * 1)
0304: C2 A5            clr DISPLAY_D1
0306: 22               ret
0308:              .org display_ss_digit_on_tab + (4 * 2)
0308: C2 C2            clr DISPLAY_D2
030A: 22               ret
                   
                   
                   ;
                   ; Input
                   ;
                   
                   
                   
                   ; Checks input, updates btns_pressed, btns_just_pressed
                   ; Uses A, R0
                   input_check:
030B: E4               clr     A
030C: 20 B7 02         jb      BTN_OK, _input_check_no_ok
030F: D2 E0            setb    ACC.0
                   _input_check_no_ok:
0311: 20 B2 02         jb      BTN_UP, _input_check_no_up
0314: D2 E1            setb    ACC.1
                   _input_check_no_up:
0316: 20 B6 02         jb      BTN_DOWN, _input_check_no_down
0319: D2 E2            setb    ACC.2
                   _input_check_no_down:
031B: 20 B3 02         jb      BTN_RIGHT, _input_check_no_right
031E: D2 E3            setb    ACC.3
                   _input_check_no_right:
0320: 20 B0 02         jb      BTN_LEFT, _input_check_no_left
0323: D2 E4            setb    ACC.4
                   _input_check_no_left:
0325: F8               mov     R0, A                           ; R0 = pressed_n
0326: 45 66            orl     A, btns_denoise_buffer + 3
0328: 45 65            orl     A, btns_denoise_buffer + 2
032A: 45 64            orl     A, btns_denoise_buffer + 1
032C: 45 63            orl     A, btns_denoise_buffer + 0
032E: 85 65 66         mov     btns_denoise_buffer + 3, btns_denoise_buffer + 2
0331: 85 64 65         mov     btns_denoise_buffer + 2, btns_denoise_buffer + 1
0334: 85 63 64         mov     btns_denoise_buffer + 1, btns_denoise_buffer + 0
0337: 88 63            mov     btns_denoise_buffer + 0, R0
0339: F8               mov     R0, A                           ; R0 = A = press
033A: E5 2E            mov     A, btns_pressed
033C: F4               cpl     A
033D: 58               anl     A, R0                           ; A = pressed & 
033E: 42 2D            orl     btns_just_pressed, A
                   
0340: E8               mov     A, R0
0341: F5 2E            mov     btns_pressed, A
0343: 52 2D            anl     btns_just_pressed, A            ; btns_just_pres
                                                               ; Non-pressed bu
0345: 22               ret
                   
                   
                   
                   ;
                   ; Display main (co)routine
                   ;
                   
                   ; Run one step of display coroutine
                   display_coro_run:
0346: C0 7D            push    display_coro_pcl
0348: C0 7E            push    display_coro_pch
034A: 22               ret
                   
                   ; End a step of display coroutine
                   ; MUST be called directly from display coroutine only
                   display_coro_yield:
034B: D0 7E            pop     display_coro_pch
034D: D0 7D            pop     display_coro_pcl
034F: 22               ret
                   
                   ; Display coroutine start
                   ; Calling this will initialize display coroutine and return
                   display_coro_start:
0350: 51 77            acall   display_row_off_all
                   
0352: 71 4B            acall   display_coro_yield
                   
0354: 75 67 01         mov     display_blink_cnt, #1
                   display_coro_loop:
                   
                   ; Blinking state update
0357: D5 67 05         djnz    display_blink_cnt, _display_coro_blnk_noover
035A: B2 78            cpl     display_blink_on
035C: 75 67 0A         mov     display_blink_cnt, #10
                   _display_coro_blnk_noover:
                   
                   ; 7-segment display
035F: 12 02 F3         lcall   display_ss_digit_off_all
0362: 12 02 E2         lcall   display_ss_segment_off_all
0365: E4               clr     A
                   _display_coro_ss_digits_loop:
0366: FF               mov     R7, A                       ; R7 = digit index
0367: 12 02 FA         lcall   display_ss_digit_on
036A: 74 7A            mov     A, #ss_anim_value_0
036C: 30 79 02         jnb     display_ss_menu_mode, _display_coro_ss_digits_lo
036F: 74 5E            mov     A, #ss_menu_value_0
                   _display_coro_ss_digits_loop_no_menu:
0371: 2F               add     A, R7
0372: F8               mov     R0, A
0373: 86 06            mov     6, @R0                      ; R6 = segment bits
                   
0375: E4               clr     A
                   _display_coro_ss_segments_loop:
0376: FD               mov     R5, A                       ; R5 = segment index
0377: EE               mov     A, R6
0378: 13               rrc     A
0379: FE               mov     R6, A
037A: 50 04            jnc     _display_coro_ss_segment_off
037C: ED               mov     A, R5
037D: 12 02 98         lcall   display_ss_segment_on
                   _display_coro_ss_segment_off:
0380: 12 03 4B         lcall   display_coro_yield
                   
0383: ED               mov     A, R5
0384: 12 02 BD         lcall   display_ss_segment_off
                   
0387: ED               mov     A, R5
0388: 04               inc     A
0389: B4 08 EA         cjne    A, #8, _display_coro_ss_segments_loop
                   
038C: 12 02 F3         lcall   display_ss_digit_off_all
038F: EF               mov     A, R7
0390: 04               inc     A
0391: B4 03 D2         cjne    A, #3, _display_coro_ss_digits_loop
                   
                   
                   ; Matrix display
                   
                   ; Sequence
                   
0394: 12 02 66         lcall   display_col_off_all
                   
0397: E4               clr     A
                   _display_notes_loop:
0398: FD               mov     R5, A                       ; R5 = note index
                   
0399: B5 68 03         cjne    A, seq_edit_cursor, _display_notes_notedit
039C: 30 78 1E         jnb     display_blink_on, _display_note_end
                   _display_notes_notedit:
039F: 12 01 92         lcall   display_row_on
                   
03A2: ED               mov     A, R5
03A3: 24 6A            add     A, #seq_notes
03A5: F8               mov     R0, A
03A6: E6               mov     A, @R0                      ; A = current note
03A7: 54 07            anl     A, #0x07                    ; (just in case...)
03A9: B4 00 05         cjne    A, #0, _display_note_visible
03AC: 12 03 4B         lcall   display_coro_yield
03AF: 80 0C            sjmp    _display_note_end
                   _display_note_visible:
03B1: 14               dec     A
03B2: FE               mov     R6, A                       ; R6 = note column
03B3: 12 02 1C         lcall   display_col_on
03B6: 12 03 4B         lcall   display_coro_yield
03B9: EE               mov     A, R6
03BA: 12 02 41         lcall   display_col_off
                   _display_note_end:
03BD: ED               mov     A, R5
03BE: 12 01 D7         lcall   display_row_off
                   
03C1: ED               mov     A, R5
03C2: 04               inc     A
03C3: B4 10 D2         cjne    A, #16, _display_notes_loop
                   
                   ; Playback cursor
                   
03C6: C2 95            clr     DISPLAY_C7
03C8: E5 69            mov     A, seq_cursor
03CA: 54 0F            anl     A, #0x0f
03CC: FD               mov     R5, A
03CD: 12 01 92         lcall   display_row_on
03D0: 12 03 4B         lcall   display_coro_yield
03D3: ED               mov     A, R5
03D4: 12 01 D7         lcall   display_row_off
03D7: D2 95            setb    DISPLAY_C7
                   
                   
                   ; End of display coroutine loop
03D9: 02 03 57         ljmp    display_coro_loop
                   
                   
                   
                   ;
                   ; Animation (on 7-segment display)
                   ;
                   
                   
                   animation_init:
                       ; TODO: Add multiple animations and choose random one
03DC: 75 61 00         mov     anim_ptr, #0
03DF: 80 0A            sjmp    _animation_update_1
                   
                   animation_frame:
03E1: E5 69            mov     A, seq_cursor
03E3: B4 00 02         cjne    A, #0, _animation_update    ; Restart animation 
03E6: 80 F4            sjmp    animation_init
                   
                   _animation_update:
03E8: D5 62 1B         djnz    anim_counter, _anim_no_change
                   _animation_update_1:
                   
03EB: 90 04 07         mov     DPTR, #animation_data
03EE: A8 61            mov     R0, anim_ptr
03F0: E8               mov     A, R0
03F1: 93               movc    A, @A + DPTR
03F2: F5 62            mov     anim_counter, A
03F4: 08               inc     R0
03F5: E8               mov     A, R0
03F6: 93               movc    A, @A + DPTR
03F7: F5 7A            mov     ss_anim_value_0, A
03F9: 08               inc     R0
03FA: E8               mov     A, R0
03FB: 93               movc    A, @A + DPTR
03FC: F5 7B            mov     ss_anim_value_1, A
03FE: 08               inc     R0
03FF: E8               mov     A, R0
0400: 93               movc    A, @A + DPTR
0401: F5 7C            mov     ss_anim_value_2, A
0403: 08               inc     R0
0404: 88 61            mov     anim_ptr, R0
                   
                   
                   _anim_no_change:
0406: 22               ret
                   
                   animation_data:
0407: 08 3F 1C 3F 
                       .db 8, SS_CHR_0, SS_CHR_U_LOW, SS_CHR_0         ; OuO
040B: 08 40 1C 40 
                       .db 8, SS_CHR_MINUS, SS_CHR_U_LOW, SS_CHR_MINUS ; -u-
040F: 08 3F 1C 3F 
                       .db 8, SS_CHR_0, SS_CHR_U_LOW, SS_CHR_0         ; 0u0
                   
                   ;
                   ; Sound control routines
                   ;
                   
                   
                   ; Play current note based on seq_* (and TODO current scale)
                   ; Uses A, DPTR
                   setup_current_note:
0413: 74 6A            mov     A, #seq_notes
0415: 25 69            add     A, seq_cursor
0417: F8               mov     R0, A
0418: E6               mov     A, @R0
0419: 54 07            anl     A, #0x07
041B: B4 00 02         cjne    A, #0, _setup_current_note_nonzero
041E: 80 06            sjmp    mute_sound
                   _setup_current_note_nonzero:
0420: 14               dec     A
                   
0421: 24 30            add     A, #48 ; TODO: Adjust to scale
                   
0423: F8               mov     R0, A
0424: 80 08            sjmp    setup_note
                   
                   
                   ; Stop playing any sound
                   mute_sound:
0426: C2 8C            clr     TR0
0428: 53 8F FE         anl     INT_CLKO, #(0xFF - INT_CLKO_T0CLKO)     ; use be
042B: D2 B5            setb    BEEPER                                  ; pull b
042D: 22               ret
                   
                   
                   ; Setup T0 to play note determined by R0.
                   ; UB if R0 > 127
                   ; Uses A, DPTR
                   setup_note:
042E: 90 04 4C         mov     DPTR, #notes_table_th
0431: E8               mov     A, R0
0432: 93               movc    A, @A+DPTR
0433: F5 8C            mov     TH0, A
                   
0435: 90 04 CC         mov     DPTR, #notes_table_tl
0438: E8               mov     A, R0
0439: 93               movc    A, @A+DPTR
043A: F5 8A            mov     TL0, A
                   
043C: 43 8F 01         orl     INT_CLKO, #INT_CLKO_T0CLKO              ; toggle
                   
                       ; !!!!!!!!!!! COMMENT TO MUTE IF DEBUGGING GETS ANNOYING
                       ;setb    TR0
                   
043F: B8 2B 04         cjne    R0, #FIRST_X12_NOTE_ID, setup_note_ne
                   setup_note_need_x12:
0442: 43 8E 80         orl     AUXR, #AUXR_T0x12
0445: 22               ret
                   setup_note_ne:
0446: 50 FA            jnc     setup_note_need_x12  ; if R0 > #FIRST_X12_NOTE_I
0448: 53 8E 7F         anl     AUXR, #(0xFF - AUXR_T0x12)
044B: 22               ret
                   
                   
                   
                   ; Note tables
                   ; 1) T2H for each note
                   notes_table_th:
044C: 02               .db 0x2         ; Cs0
044D: 10               .db 0x10        ; D0
044E: 1E               .db 0x1e        ; Ds0
044F: 2A               .db 0x2a        ; E0
0450: 36               .db 0x36        ; F0
0451: 41               .db 0x41        ; Fs0
0452: 4C               .db 0x4c        ; G0
0453: 56               .db 0x56        ; Gs0
0454: 60               .db 0x60        ; A0
0455: 69               .db 0x69        ; As0
0456: 71               .db 0x71        ; B0
0457: 79               .db 0x79        ; C1
0458: 81               .db 0x81        ; Cs1
0459: 88               .db 0x88        ; D1
045A: 8F               .db 0x8f        ; Ds1
045B: 95               .db 0x95        ; E1
045C: 9B               .db 0x9b        ; F1
045D: A0               .db 0xa0        ; Fs1
045E: A6               .db 0xa6        ; G1
045F: AB               .db 0xab        ; Gs1
0460: B0               .db 0xb0        ; A1
0461: B4               .db 0xb4        ; As1
0462: B8               .db 0xb8        ; B1
0463: BC               .db 0xbc        ; C2
0464: C0               .db 0xc0        ; Cs2
0465: C4               .db 0xc4        ; D2
0466: C7               .db 0xc7        ; Ds2
0467: CA               .db 0xca        ; E2
0468: CD               .db 0xcd        ; F2
0469: D0               .db 0xd0        ; Fs2
046A: D3               .db 0xd3        ; G2
046B: D5               .db 0xd5        ; Gs2
046C: D8               .db 0xd8        ; A2
046D: DA               .db 0xda        ; As2
046E: DC               .db 0xdc        ; B2
046F: DE               .db 0xde        ; C3
0470: E0               .db 0xe0        ; Cs3
0471: E2               .db 0xe2        ; D3
0472: E3               .db 0xe3        ; Ds3
0473: E5               .db 0xe5        ; E3
0474: E6               .db 0xe6        ; F3
0475: E8               .db 0xe8        ; Fs3
0476: E9               .db 0xe9        ; G3
0477: 02               .db 0x2         ; Gs3
0478: 10               .db 0x10        ; A3
0479: 1D               .db 0x1d        ; As3
047A: 2A               .db 0x2a        ; B3
047B: 36               .db 0x36        ; C4
047C: 41               .db 0x41        ; Cs4
047D: 4C               .db 0x4c        ; D4
047E: 56               .db 0x56        ; Ds4
047F: 60               .db 0x60        ; E4
0480: 68               .db 0x68        ; F4
0481: 71               .db 0x71        ; Fs4
0482: 79               .db 0x79        ; G4
0483: 81               .db 0x81        ; Gs4
0484: 88               .db 0x88        ; A4
0485: 8E               .db 0x8e        ; As4
0486: 95               .db 0x95        ; B4
0487: 9B               .db 0x9b        ; C5
0488: A0               .db 0xa0        ; Cs5
0489: A6               .db 0xa6        ; D5
048A: AB               .db 0xab        ; Ds5
048B: B0               .db 0xb0        ; E5
048C: B4               .db 0xb4        ; F5
048D: B8               .db 0xb8        ; Fs5
048E: BC               .db 0xbc        ; G5
048F: C0               .db 0xc0        ; Gs5
0490: C4               .db 0xc4        ; A5
0491: C7               .db 0xc7        ; As5
0492: CA               .db 0xca        ; B5
0493: CD               .db 0xcd        ; C6
0494: D0               .db 0xd0        ; Cs6
0495: D3               .db 0xd3        ; D6
0496: D5               .db 0xd5        ; Ds6
0497: D8               .db 0xd8        ; E6
0498: DA               .db 0xda        ; F6
0499: DC               .db 0xdc        ; Fs6
049A: DE               .db 0xde        ; G6
049B: E0               .db 0xe0        ; Gs6
049C: E2               .db 0xe2        ; A6
049D: E3               .db 0xe3        ; As6
049E: E5               .db 0xe5        ; B6
049F: E6               .db 0xe6        ; C7
04A0: E8               .db 0xe8        ; Cs7
04A1: E9               .db 0xe9        ; D7
04A2: EA               .db 0xea        ; Ds7
04A3: EC               .db 0xec        ; E7
04A4: ED               .db 0xed        ; F7
04A5: EE               .db 0xee        ; Fs7
04A6: EF               .db 0xef        ; G7
04A7: F0               .db 0xf0        ; Gs7
04A8: F1               .db 0xf1        ; A7
04A9: F1               .db 0xf1        ; As7
04AA: F2               .db 0xf2        ; B7
04AB: F3               .db 0xf3        ; C8
04AC: F4               .db 0xf4        ; Cs8
04AD: F4               .db 0xf4        ; D8
04AE: F5               .db 0xf5        ; Ds8
04AF: F6               .db 0xf6        ; E8
04B0: F6               .db 0xf6        ; F8
04B1: F7               .db 0xf7        ; Fs8
04B2: F7               .db 0xf7        ; G8
04B3: F8               .db 0xf8        ; Gs8
04B4: F8               .db 0xf8        ; A8
04B5: F8               .db 0xf8        ; As8
04B6: F9               .db 0xf9        ; B8
04B7: F9               .db 0xf9        ; C9
04B8: FA               .db 0xfa        ; Cs9
04B9: FA               .db 0xfa        ; D9
04BA: FA               .db 0xfa        ; Ds9
04BB: FB               .db 0xfb        ; E9
04BC: FB               .db 0xfb        ; F9
04BD: FB               .db 0xfb        ; Fs9
04BE: FB               .db 0xfb        ; G9
04BF: FC               .db 0xfc        ; Gs9
04C0: FC               .db 0xfc        ; A9
04C1: FC               .db 0xfc        ; As9
04C2: FC               .db 0xfc        ; B9
04C3: FC               .db 0xfc        ; C10
04C4: FD               .db 0xfd        ; Cs10
04C5: FD               .db 0xfd        ; D10
04C6: FD               .db 0xfd        ; Ds10
04C7: FD               .db 0xfd        ; E10
04C8: FD               .db 0xfd        ; F10
04C9: FD               .db 0xfd        ; Fs10
04CA: FD               .db 0xfd        ; G10
04CB: FE               .db 0xfe        ; Gs10
                   ; 2) T2L for each note
                   notes_table_tl:
04CC: 55               .db 0x55        ; Cs0
04CD: 92               .db 0x92        ; D0
04CE: 02               .db 0x2         ; Ds0
04CF: B1               .db 0xb1        ; E0
04D0: AA               .db 0xaa        ; F0
04D1: F7               .db 0xf7        ; Fs0
04D2: A1               .db 0xa1        ; G0
04D3: B2               .db 0xb2        ; Gs0
04D4: 33               .db 0x33        ; A0
04D5: 2B               .db 0x2b        ; As0
04D6: A2               .db 0xa2        ; B0
04D7: A0               .db 0xa0        ; C1
04D8: 2A               .db 0x2a        ; Cs1
04D9: 49               .db 0x49        ; D1
04DA: 01               .db 0x1         ; Ds1
04DB: 58               .db 0x58        ; E1
04DC: 55               .db 0x55        ; F1
04DD: FB               .db 0xfb        ; Fs1
04DE: 51               .db 0x51        ; G1
04DF: 59               .db 0x59        ; Gs1
04E0: 19               .db 0x19        ; A1
04E1: 95               .db 0x95        ; As1
04E2: D1               .db 0xd1        ; B1
04E3: D0               .db 0xd0        ; C2
04E4: 95               .db 0x95        ; Cs2
04E5: 24               .db 0x24        ; D2
04E6: 80               .db 0x80        ; Ds2
04E7: AC               .db 0xac        ; E2
04E8: AA               .db 0xaa        ; F2
04E9: 7E               .db 0x7e        ; Fs2
04EA: 28               .db 0x28        ; G2
04EB: AD               .db 0xad        ; Gs2
04EC: 0D               .db 0xd         ; A2
04ED: 4B               .db 0x4b        ; As2
04EE: 69               .db 0x69        ; B2
04EF: 68               .db 0x68        ; C3
04F0: 4B               .db 0x4b        ; Cs3
04F1: 12               .db 0x12        ; D3
04F2: C0               .db 0xc0        ; Ds3
04F3: 56               .db 0x56        ; E3
04F4: D5               .db 0xd5        ; F3
04F5: 3F               .db 0x3f        ; Fs3
04F6: 94               .db 0x94        ; G3
04F7: 0B               .db 0xb         ; Gs3
04F8: 4C               .db 0x4c        ; A3
04F9: C0               .db 0xc0        ; As3
04FA: 73               .db 0x73        ; B3
04FB: 70               .db 0x70        ; C4
04FC: C0               .db 0xc0        ; Cs4
04FD: 6D               .db 0x6d        ; D4
04FE: 81               .db 0x81        ; Ds4
04FF: 05               .db 0x5         ; E4
0500: FF               .db 0xff        ; F4
0501: 79               .db 0x79        ; Fs4
0502: 79               .db 0x79        ; G4
0503: 06               .db 0x6         ; Gs4
0504: 26               .db 0x26        ; A4
0505: E0               .db 0xe0        ; As4
0506: 3A               .db 0x3a        ; B4
0507: 38               .db 0x38        ; C5
0508: E0               .db 0xe0        ; Cs5
0509: 37               .db 0x37        ; D5
050A: 41               .db 0x41        ; Ds5
050B: 02               .db 0x2         ; E5
050C: 80               .db 0x80        ; F5
050D: BC               .db 0xbc        ; Fs5
050E: BC               .db 0xbc        ; G5
050F: 83               .db 0x83        ; Gs5
0510: 13               .db 0x13        ; A5
0511: 70               .db 0x70        ; As5
0512: 9D               .db 0x9d        ; B5
0513: 9C               .db 0x9c        ; C6
0514: 70               .db 0x70        ; Cs6
0515: 1B               .db 0x1b        ; D6
0516: A0               .db 0xa0        ; Ds6
0517: 01               .db 0x1         ; E6
0518: 40               .db 0x40        ; F6
0519: 5E               .db 0x5e        ; Fs6
051A: 5E               .db 0x5e        ; G6
051B: 41               .db 0x41        ; Gs6
051C: 0A               .db 0xa         ; A6
051D: B8               .db 0xb8        ; As6
051E: 4E               .db 0x4e        ; B6
051F: CE               .db 0xce        ; C7
0520: 38               .db 0x38        ; Cs7
0521: 8E               .db 0x8e        ; D7
0522: D0               .db 0xd0        ; Ds7
0523: 01               .db 0x1         ; E7
0524: 20               .db 0x20        ; F7
0525: 2F               .db 0x2f        ; Fs7
0526: 2F               .db 0x2f        ; G7
0527: 21               .db 0x21        ; Gs7
0528: 05               .db 0x5         ; A7
0529: DC               .db 0xdc        ; As7
052A: A7               .db 0xa7        ; B7
052B: 67               .db 0x67        ; C8
052C: 1C               .db 0x1c        ; Cs8
052D: C7               .db 0xc7        ; D8
052E: 68               .db 0x68        ; Ds8
052F: 00               .db 0x0         ; E8
0530: 90               .db 0x90        ; F8
0531: 18               .db 0x18        ; Fs8
0532: 98               .db 0x98        ; G8
0533: 10               .db 0x10        ; Gs8
0534: 82               .db 0x82        ; A8
0535: EE               .db 0xee        ; As8
0536: 54               .db 0x54        ; B8
0537: B3               .db 0xb3        ; C9
0538: 0E               .db 0xe         ; Cs9
0539: 63               .db 0x63        ; D9
053A: B4               .db 0xb4        ; Ds9
053B: 00               .db 0x0         ; E9
053C: 48               .db 0x48        ; F9
053D: 8C               .db 0x8c        ; Fs9
053E: CC               .db 0xcc        ; G9
053F: 08               .db 0x8         ; Gs9
0540: 41               .db 0x41        ; A9
0541: 77               .db 0x77        ; As9
0542: AA               .db 0xaa        ; B9
0543: DA               .db 0xda        ; C10
0544: 07               .db 0x7         ; Cs10
0545: 32               .db 0x32        ; D10
0546: 5A               .db 0x5a        ; Ds10
0547: 80               .db 0x80        ; E10
0548: A4               .db 0xa4        ; F10
0549: C6               .db 0xc6        ; Fs10
054A: E6               .db 0xe6        ; G10
054B: 04               .db 0x4         ; Gs10
                   ; Index of first note that does need full system frequency
054C:              .equ    FIRST_X12_NOTE_ID, 43
                   ; Tempo tables
                   ; 1) TH per tempo
                   tempo_table_th:
054C: 14               .db 0x14        ; 20 bpm
054D: 08               .db 0x8         ; 33.3 bpm
054E: 32               .db 0x32        ; 40 bpm
054F: 48               .db 0x48        ; 60 bpm
0550: 32               .db 0x32        ; 80 bpm
0551: 76               .db 0x76        ; 120 bpm
0552: 14               .db 0x14        ; 140 bpm
                   ; 2) TL per tempo
                   tempo_table_tl:
0553: 95               .db 0x95        ; 20 bpm
0554: 90               .db 0x90        ; 33.3 bpm
0555: 02               .db 0x2         ; 40 bpm
0556: E5               .db 0xe5        ; 60 bpm
0557: 02               .db 0x2         ; 80 bpm
0558: AC               .db 0xac        ; 120 bpm
0559: 95               .db 0x95        ; 140 bpm
                   ; 3) Software divider per tempo
                   tempo_table_sd:
055A: 07               .db 0x7         ; 20 bpm
055B: 04               .db 0x4         ; 33.3 bpm
055C: 04               .db 0x4         ; 40 bpm
055D: 03               .db 0x3         ; 60 bpm
055E: 02               .db 0x2         ; 80 bpm
055F: 02               .db 0x2         ; 120 bpm
0560: 01               .db 0x1         ; 140 bpm
0561:              .equ tempo_initial_index, 4
0561:              .equ tempo_max_index, 6
                   ; 4.1) Seven-segment first character per tempo
                   tempo_table_ss_0:
0561: 00 4F 00 00 
      00 06 06         .db 0, SS_CHR_3, 0, 0, 0, SS_CHR_1, SS_CHR_1
                   ; 4.2) Seven-segment second character per tempo
                   tempo_table_ss_1:
0568: 5B CF 66 7D 
      7F 5B 66         .db SS_CHR_2, SS_CHR_3 | SS_SEGB_DP, SS_CHR_4, SS_CHR_6,
                   ; 4.3) Seven-segment third character per tempo
                   tempo_table_ss_2:
056F: 3F 4F 3F 3F 
      3F 3F 3F         .db SS_CHR_0, SS_CHR_3, SS_CHR_0, SS_CHR_0, SS_CHR_0, SS
