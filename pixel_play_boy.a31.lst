                   ; /d/progs/sdcc/bin/as31.exe -l ./pixel_play_boy.a31
                   
                   
                   ;
                   ; STC15F2K60S2 specific definitions
                   ;
                   
                   
0000:              .equ    P0M0, 0x94
0000:              .equ    P0M1, 0x93
                   
0000:              .equ    P1M0, 0x92
0000:              .equ    P1M1, 0x91
                   
0000:              .equ    P2M0, 0x96
0000:              .equ    P2M1, 0x95
                   
0000:              .equ    P3M0, 0xB2
0000:              .equ    P3M1, 0xB1
                   
0000:              .equ    P4, 0xC0
0000:              .equ    P4M0, 0xB4
0000:              .equ    P4M1, 0xB3
                   
0000:              .equ    P5, 0xC8
0000:              .equ    P5M0, 0xCA
0000:              .equ    P5M1, 0xC9
                   
                   ; | T0x12 | T1x12 | UART_M0x6 | T2R | T2_C/~T | T2x12 | EXTR
0000:              .equ    AUXR,           0x8E
0000:              .equ    AUXR_T0x12,     (1 << 7)
0000:              .equ    AUXR_T2x12,     (1 << 2)
0000:              .equ    AUXR_T2R,       (1 << 4)
                   
                   ; | - | EX4 | EX3 | EX2 | - | T2CLKO | T1CLKO | T0CLKO |
0000:              .equ    INT_CLKO,       0x8F
0000:              .equ    INT_CLKO_T0CLKO,(1)
                   
                   ; | - | ET4 | ET3 | ES4 | ES3 | ET2 | ESPI | ES2 |
0000:              .equ    IE2,            0xAF
0000:              .equ    IE2_ET2,        (1 << 2)
0000:              .equ    IE2_ET3,        (1 << 5)
0000:              .equ    IE2_ET4,        (1 << 6)
                   
0000:              .equ    T2L,            0xD7
0000:              .equ    T2H,            0xD6
                   
                   
                   
                   
                   ;
                   ; Board layout definitions
                   ;
                   
                   
                   
0000:              .flag   BEEPER, P3.5        ; Beeper output, DIFFERENT FROM 
                   
                   ; Buttons
0000:              .flag BTN_UP,           P3.2
0000:              .flag BTN_DOWN,         P3.6
0000:              .flag BTN_RIGHT,        P3.3
0000:              .flag BTN_LEFT,         P3.0
0000:              .flag BTN_OK,           P3.7
                   
                   ; Display rows
0000:              .flag DISPLAY_R0,       P2.6
0000:              .flag DISPLAY_R1,       P4.5
0000:              .flag DISPLAY_R2,       P0.4
0000:              .flag DISPLAY_R3,       P2.7
0000:              .flag DISPLAY_R4,       P0.0
0000:              .flag DISPLAY_R5,       P0.3
0000:              .flag DISPLAY_R6,       P0.1
0000:              .flag DISPLAY_R7,       P0.2
0000:              .flag DISPLAY_R8,       P0.5
0000:              .flag DISPLAY_R9,       P0.7
0000:              .flag DISPLAY_R10,      P1.3
0000:              .flag DISPLAY_R11,      P0.6
0000:              .flag DISPLAY_R12,      P1.0
0000:              .flag DISPLAY_R13,      P1.2
0000:              .flag DISPLAY_R14,      P1.1
0000:              .flag DISPLAY_R15,      P1.6
                   
                   ; Display columns
0000:              .flag DISPLAY_C0,       P2.4
0000:              .flag DISPLAY_C1,       P2.0
0000:              .flag DISPLAY_C2,       P4.4
0000:              .flag DISPLAY_C3,       P2.1
0000:              .flag DISPLAY_C4,       P1.4
0000:              .flag DISPLAY_C5,       P2.2
0000:              .flag DISPLAY_C6,       P4.1
0000:              .flag DISPLAY_C7,       P1.5
                   
                   ; Display digits
0000:              .flag DISPLAY_D0,       P2.3
0000:              .flag DISPLAY_D1,       P2.5
0000:              .flag DISPLAY_D2,       P4.2
                   
                   ; Display digit segments (overlap with matrix columns)
0000:              .flag SMG_A,            P4.1
0000:              .flag SMG_B,            P2.4
0000:              .flag SMG_C,            P2.1
0000:              .flag SMG_D,            P2.0
0000:              .flag SMG_E,            P4.4
0000:              .flag SMG_F,            P2.2
0000:              .flag SMG_G,            P1.4
                   
0000:              .flag SMG_DP,           P1.5 ; Missing on original board
                   
                   
                   ;
                   ; 7-segment display definitions
                   ;
                   
0000:              .equ    SS_SEGN_A, 0
0000:              .equ    SS_SEGN_B, 1
0000:              .equ    SS_SEGN_C, 2
0000:              .equ    SS_SEGN_D, 3
0000:              .equ    SS_SEGN_E, 4
0000:              .equ    SS_SEGN_F, 5
0000:              .equ    SS_SEGN_G, 6
                   
0000:              .equ    SS_SEGN_DP, 7
                   
0000:              .equ    SS_SEGB_A, (1 << SS_SEGN_A)
0000:              .equ    SS_SEGB_B, (1 << SS_SEGN_B)
0000:              .equ    SS_SEGB_C, (1 << SS_SEGN_C)
0000:              .equ    SS_SEGB_D, (1 << SS_SEGN_D)
0000:              .equ    SS_SEGB_E, (1 << SS_SEGN_E)
0000:              .equ    SS_SEGB_F, (1 << SS_SEGN_F)
0000:              .equ    SS_SEGB_G, (1 << SS_SEGN_G)
                   
0000:              .equ    SS_SEGB_DP, (1 << SS_SEGN_DP)
                   
0000:              .equ    SS_CHR_0, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_1, SS_SEGB_B | SS_SEGB_C
0000:              .equ    SS_CHR_2, SS_SEGB_A | SS_SEGB_B | SS_SEGB_G | SS_SEG
0000:              .equ    SS_CHR_3, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_4, SS_SEGB_B | SS_SEGB_C | SS_SEGB_F | SS_SEG
0000:              .equ    SS_CHR_5, SS_SEGB_A | SS_SEGB_F | SS_SEGB_G | SS_SEG
0000:              .equ    SS_CHR_6, SS_SEGB_A | SS_SEGB_F | SS_SEGB_G | SS_SEG
0000:              .equ    SS_CHR_7, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C
0000:              .equ    SS_CHR_8, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_9, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
                   
0000:              .equ    SS_CHR_MINUS, SS_SEGB_G
                   
0000:              .equ    SS_CHR_A, SS_SEGB_A | SS_SEGB_B | SS_SEGB_C | SS_SEG
0000:              .equ    SS_CHR_B, SS_SEGB_C | SS_SEGB_D | SS_SEGB_F | SS_SEG
0000:              .equ    SS_CHR_C_UP, SS_SEGB_A | SS_SEGB_D | SS_SEGB_E | SS_
0000:              .equ    SS_CHR_C_LOW, SS_SEGB_D | SS_SEGB_E | SS_SEGB_G
0000:              .equ    SS_CHR_D, SS_SEGB_B | SS_SEGB_C | SS_SEGB_D | SS_SEG
0000:              .equ    SS_CHR_E, SS_SEGB_A | SS_SEGB_D | SS_SEGB_E | SS_SEG
0000:              .equ    SS_CHR_F, SS_SEGB_A | SS_SEGB_E | SS_SEGB_F | SS_SEG
0000:              .equ    SS_CHR_G, SS_SEGB_A | SS_SEGB_C | SS_SEGB_D | SS_SEG
                   
0000:              .equ    SS_CHR_O_UP, SS_CHR_0
0000:              .equ    SS_CHR_O_LOW, SS_SEGB_C | SS_SEGB_D | SS_SEGB_E | SS
0000:              .equ    SS_CHR_U_UP, SS_SEGB_B | SS_SEGB_C | SS_SEGB_D | SS_
0000:              .equ    SS_CHR_U_LOW, SS_SEGB_C | SS_SEGB_D | SS_SEGB_E
                   
                   ;
                   ; Memory layout
                   ;
                   
0000:              .equ    stack_bottom, 0x7f                      ; Stack take
                   
                   ; Variables
                   
0000:              .equ    tempo_tick, stack_bottom                ; Tempo tick
                   
0000:              .equ    display_coro_pch, tempo_tick - 1        ; Display co
0000:              .equ    display_coro_pcl, display_coro_pch - 1
                   
0000:              .equ    ss_value_2, display_coro_pcl - 1        ; Characters
0000:              .equ    ss_value_1, ss_value_2 - 1
0000:              .equ    ss_value_0, ss_value_1 - 1
                   
0000:              .equ    seq_notes, ss_value_0 - 16              ; Current se
                                                                   ; 16 notes, 
                                                                   ; where 0 is
                   
0000:              .equ    seq_cursor, seq_notes - 1               ; Index of c
0000:              .equ    seq_edit_cursor, seq_cursor - 1         ; Index of c
                                                                   ; Outside of
0000:              .equ    display_blink_cnt, seq_edit_cursor - 1  ; Cursor bli
                   
0000:              .equ    btns_denoise_buffer, display_blink_cnt - 4  ; A buff
                   
0000:              .equ    anim_counter, btns_denoise_buffer - 1   ; Animation 
0000:              .equ    anim_ptr, anim_counter - 1
                   
                   
                   
                   ; Bit-addressable variables
                   
0000:              .equ    aux_bits, 0x2F                          ; Highest bi
                   
0000:              .flag   display_blink_on, aux_bits.0            ; If blinkin
                   
0000:              .equ    btns_pressed, aux_bits - 1              ; Buttons cu
                   
0000:              .flag   btn_pressed_ok, btns_pressed.0
0000:              .flag   btn_pressed_up, btns_pressed.1
0000:              .flag   btn_pressed_down, btns_pressed.2
0000:              .flag   btn_pressed_right, btns_pressed.3
0000:              .flag   btn_pressed_left, btns_pressed.4
                   
0000:              .equ    btns_just_pressed, btns_pressed - 1     ; Buttons pr
                   
0000:              .flag   btn_just_pressed_ok, btns_just_pressed.0
0000:              .flag   btn_just_pressed_up, btns_just_pressed.1
0000:              .flag   btn_just_pressed_down, btns_just_pressed.2
0000:              .flag   btn_just_pressed_right, btns_just_pressed.3
0000:              .flag   btn_just_pressed_left, btns_just_pressed.4
                   
                   ;
                   ; Interrupt handlers
                   ;
                   
                   
                   
0000:              .org 0x0000             ; Reset handler
0000: 02 00 7A         ljmp    main
                   
                   ;.org 0x000B             ; Timer 0 interrupt - not used, T0 
                   ;    cpl     BEEPER
                   ;    reti
                   
001B:              .org 0x001B             ; Timer 1 interrupt - triggered on e
001B: D5 7F 20         djnz    tempo_tick, _t1i_no_next_note   ; if (--tempo_ti
                   
001E: C0 E0            push    ACC
0020: C0 00            push    0
0022: C0 82            push    DPL
0024: C0 83            push    DPH
                   
0026: 75 7F 07         mov     tempo_tick, #7
                   
0029: E5 69            mov     A, seq_cursor
002B: 04               inc     A
002C: 54 0F            anl     A, #0x0f
002E: F5 69            mov     seq_cursor, A
                   
0030: 12 03 70         lcall   animation_frame
                   
0033: 12 03 A2         lcall   setup_current_note
                   
                   
0036: D0 83            pop     DPH
0038: D0 82            pop     DPL
003A: D0 00            pop     0
003C: D0 E0            pop     ACC
                   _t1i_no_next_note:
003E: 32               reti
                   
0063:              .org 0x0063             ; Timer 2 interrupt - update display
0063: C0 E0            push    ACC
0065: C0 00            push    0
0067: C0 82            push    DPL
0069: C0 83            push    DPH
                   
006B: 12 02 DA         lcall display_coro_run
006E: 12 02 9F         lcall input_check
                   
0071: D0 83            pop     DPH
0073: D0 82            pop     DPL
0075: D0 00            pop     0
0077: D0 E0            pop     ACC
0079: 32               reti
                   
                   
                   
                   
                   
                   ;
                   ; Entry point
                   ;
                   main:
                   
                   ; Hardware initialization
                   
                   ; Stack init
007A: 75 81 7F         mov     SP, #stack_bottom
                   
                   ; Tempo counter init
007D: 85 14 8D         mov     TH1, 0x14
0080: 85 95 8B         mov     TL1, 0x95
0083: 43 A8 08         orl     IE, #(1 << 3)
0086: D2 8E            setb    TR1
0088: 75 7F 07         mov     tempo_tick, #7
                   
                   ; Display setup
008B: 75 94 FF         mov     P0M0, #0xFF         ; set display pin modes to p
008E: 75 92 FF         mov     P1M0, #0xFF
0091: 75 96 FF         mov     P2M0, #0xFF
0094: 75 B4 FF         mov     P4M0, #0xFF
0097: 12 02 E4         lcall display_coro_start    ; start display coroutine
009A: 75 D6 FE         mov     T2H, #0xFE          ; start display timer (T2)
009D: 75 D7 00         mov     T2L, #0
00A0: 43 8E 10         orl     AUXR, #AUXR_T2R
00A3: 43 AF 04         orl     IE2, #IE2_ET2
                   
00A6: 12 03 6B         lcall   animation_init
                   
                   ; Sequence setup
00A9: 75 6A 01         mov     (seq_notes + 0), #1
00AC: 75 6B 02         mov     (seq_notes + 1), #2
00AF: 75 6C 03         mov     (seq_notes + 2), #3
00B2: 75 6D 04         mov     (seq_notes + 3), #4
00B5: 75 6E 05         mov     (seq_notes + 4), #5
00B8: 75 6F 06         mov     (seq_notes + 5), #6
00BB: 75 70 07         mov     (seq_notes + 6), #7
00BE: 75 71 00         mov     (seq_notes + 7), #0
00C1: 75 72 01         mov     (seq_notes + 8), #1
00C4: 75 73 02         mov     (seq_notes + 9), #2
00C7: 75 74 03         mov     (seq_notes + 10), #3
00CA: 75 75 04         mov     (seq_notes + 11), #4
00CD: 75 76 05         mov     (seq_notes + 12), #5
00D0: 75 77 06         mov     (seq_notes + 13), #6
00D3: 75 78 07         mov     (seq_notes + 14), #7
00D6: 75 79 00         mov     (seq_notes + 15), #0
                   
00D9: 75 69 00         mov     seq_cursor, #0
00DC: 75 68 02         mov     seq_edit_cursor, #2
                   
00DF: 12 03 A2         lcall   setup_current_note
                   
                   ;
00E2: D2 AF            setb    EA          ; Enable interrupts
                       
00E4: 80 00            sjmp    interaction_edit_notes
                   
                   
                   
                   interaction_edit_notes:
00E6: 20 69 0B         jb      btn_just_pressed_up, interaction_edit_notes_curs
00E9: 20 6A 13         jb      btn_just_pressed_down, interaction_edit_notes_cu
00EC: 20 6B 1B         jb      btn_just_pressed_right, interaction_edit_notes_n
00EF: 20 6C 26         jb      btn_just_pressed_left, interaction_edit_notes_no
00F2: 80 F2            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_cursor_up:
00F4: C2 69            clr     btn_just_pressed_up
00F6: E5 68            mov     A, seq_edit_cursor
00F8: 14               dec     A
00F9: 54 0F            anl     A, #0x0f
00FB: F5 68            mov     seq_edit_cursor, A
00FD: 80 E7            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_cursor_down:
00FF: C2 6A            clr     btn_just_pressed_down
0101: E5 68            mov     A, seq_edit_cursor
0103: 04               inc     A
0104: 54 0F            anl     A, #0x0f
0106: F5 68            mov     seq_edit_cursor, A
0108: 80 DC            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_note_up:
010A: C2 6B            clr     btn_just_pressed_right
010C: E5 68            mov     A, seq_edit_cursor
010E: 24 6A            add     A, #seq_notes
0110: F8               mov     R0, A
0111: E6               mov     A, @R0
0112: 04               inc     A
0113: 54 07            anl     A, #0x07
0115: F6               mov     @R0, A
0116: 80 CE            sjmp    interaction_edit_notes
                   
                   interaction_edit_notes_note_down:
0118: C2 6C            clr     btn_just_pressed_left
011A: E5 68            mov     A, seq_edit_cursor
011C: 24 6A            add     A, #seq_notes
011E: F8               mov     R0, A
011F: E6               mov     A, @R0
0120: 14               dec     A
0121: 54 07            anl     A, #0x07
0123: F6               mov     @R0, A
0124: 80 C0            sjmp    interaction_edit_notes
                   
                   
                   ;
                   ; Display control subroutines
                   ;
                   
                   
                   
                   
                   
                   ; Enable display row determined by A
                   ; UB if A >= 16
                   ; Uses A, DPTR
                   display_row_on:
0126: 90 01 2C         mov     DPTR, #display_row_on_tab
0129: 23               rl      A
012A: 23               rl      A
012B: 73               jmp     @A + DPTR   ; jmp display_row_on_tab + row * 4
                   display_row_on_tab:
012C: D2 A6            setb    DISPLAY_R0
012E: 22               ret
                   ; print('\n'.join(f".org display_row_on_tab + (4 * {i})\n   
0130:              .org display_row_on_tab + (4 * 1)
0130: D2 C5            setb DISPLAY_R1
0132: 22               ret
0134:              .org display_row_on_tab + (4 * 2)
0134: D2 84            setb DISPLAY_R2
0136: 22               ret
0138:              .org display_row_on_tab + (4 * 3)
0138: D2 A7            setb DISPLAY_R3
013A: 22               ret
013C:              .org display_row_on_tab + (4 * 4)
013C: D2 80            setb DISPLAY_R4
013E: 22               ret
0140:              .org display_row_on_tab + (4 * 5)
0140: D2 83            setb DISPLAY_R5
0142: 22               ret
0144:              .org display_row_on_tab + (4 * 6)
0144: D2 81            setb DISPLAY_R6
0146: 22               ret
0148:              .org display_row_on_tab + (4 * 7)
0148: D2 82            setb DISPLAY_R7
014A: 22               ret
014C:              .org display_row_on_tab + (4 * 8)
014C: D2 85            setb DISPLAY_R8
014E: 22               ret
0150:              .org display_row_on_tab + (4 * 9)
0150: D2 87            setb DISPLAY_R9
0152: 22               ret
0154:              .org display_row_on_tab + (4 * 10)
0154: D2 93            setb DISPLAY_R10
0156: 22               ret
0158:              .org display_row_on_tab + (4 * 11)
0158: D2 86            setb DISPLAY_R11
015A: 22               ret
015C:              .org display_row_on_tab + (4 * 12)
015C: D2 90            setb DISPLAY_R12
015E: 22               ret
0160:              .org display_row_on_tab + (4 * 13)
0160: D2 92            setb DISPLAY_R13
0162: 22               ret
0164:              .org display_row_on_tab + (4 * 14)
0164: D2 91            setb DISPLAY_R14
0166: 22               ret
0168:              .org display_row_on_tab + (4 * 15)
0168: D2 96            setb DISPLAY_R15
016A: 22               ret
                   
                   ; Disable display row determined by A
                   ; UB if A >= 16
                   ; Uses A, DPTR
                   display_row_off:
016B: 90 01 71         mov     DPTR, #display_row_off_tab
016E: 23               rl      A
016F: 23               rl      A
0170: 73               jmp     @A + DPTR   ; jmp display_row_off_tab + row * 4
                   display_row_off_tab:
0171: C2 A6            clr     DISPLAY_R0
0173: 22               ret
                   ; print('\n'.join(f".org display_row_off_tab + (4 * {i})\n  
0175:              .org display_row_off_tab + (4 * 1)
0175: C2 C5            clr DISPLAY_R1
0177: 22               ret
0179:              .org display_row_off_tab + (4 * 2)
0179: C2 84            clr DISPLAY_R2
017B: 22               ret
017D:              .org display_row_off_tab + (4 * 3)
017D: C2 A7            clr DISPLAY_R3
017F: 22               ret
0181:              .org display_row_off_tab + (4 * 4)
0181: C2 80            clr DISPLAY_R4
0183: 22               ret
0185:              .org display_row_off_tab + (4 * 5)
0185: C2 83            clr DISPLAY_R5
0187: 22               ret
0189:              .org display_row_off_tab + (4 * 6)
0189: C2 81            clr DISPLAY_R6
018B: 22               ret
018D:              .org display_row_off_tab + (4 * 7)
018D: C2 82            clr DISPLAY_R7
018F: 22               ret
0191:              .org display_row_off_tab + (4 * 8)
0191: C2 85            clr DISPLAY_R8
0193: 22               ret
0195:              .org display_row_off_tab + (4 * 9)
0195: C2 87            clr DISPLAY_R9
0197: 22               ret
0199:              .org display_row_off_tab + (4 * 10)
0199: C2 93            clr DISPLAY_R10
019B: 22               ret
019D:              .org display_row_off_tab + (4 * 11)
019D: C2 86            clr DISPLAY_R11
019F: 22               ret
01A1:              .org display_row_off_tab + (4 * 12)
01A1: C2 90            clr DISPLAY_R12
01A3: 22               ret
01A5:              .org display_row_off_tab + (4 * 13)
01A5: C2 92            clr DISPLAY_R13
01A7: 22               ret
01A9:              .org display_row_off_tab + (4 * 14)
01A9: C2 91            clr DISPLAY_R14
01AB: 22               ret
01AD:              .org display_row_off_tab + (4 * 15)
01AD: C2 96            clr DISPLAY_R15
01AF: 22               ret
                   
                   ; Enable column determined by A
                   ; UB if A >= 8
                   ; Uses A, DPTR
                   display_col_on:
01B0: 90 01 B6         mov     DPTR, #display_col_on_tab
01B3: 23               rl      A
01B4: 23               rl      A
01B5: 73               jmp     @A + DPTR
                   display_col_on_tab:
01B6: C2 A4            clr     DISPLAY_C0              ; Columns are negative
01B8: 22               ret
                   ; print('\n'.join(f".org display_col_on_tab + (4 * {i})\n   
01BA:              .org display_col_on_tab + (4 * 1)
01BA: C2 A0            clr DISPLAY_C1
01BC: 22               ret
01BE:              .org display_col_on_tab + (4 * 2)
01BE: C2 C4            clr DISPLAY_C2
01C0: 22               ret
01C2:              .org display_col_on_tab + (4 * 3)
01C2: C2 A1            clr DISPLAY_C3
01C4: 22               ret
01C6:              .org display_col_on_tab + (4 * 4)
01C6: C2 94            clr DISPLAY_C4
01C8: 22               ret
01CA:              .org display_col_on_tab + (4 * 5)
01CA: C2 A2            clr DISPLAY_C5
01CC: 22               ret
01CE:              .org display_col_on_tab + (4 * 6)
01CE: C2 C1            clr DISPLAY_C6
01D0: 22               ret
01D2:              .org display_col_on_tab + (4 * 7)
01D2: C2 95            clr DISPLAY_C7
01D4: 22               ret
                   
                   display_col_off:
01D5: 90 01 DB         mov     DPTR, #display_col_off_tab
01D8: 23               rl      A
01D9: 23               rl      A
01DA: 73               jmp     @A + DPTR
                   display_col_off_tab:
01DB: D2 A4            setb    DISPLAY_C0              ; Columns are negative
01DD: 22               ret
                   ; print('\n'.join(f".org display_col_off_tab + (4 * {i})\n  
01DF:              .org display_col_off_tab + (4 * 1)
01DF: D2 A0            setb DISPLAY_C1
01E1: 22               ret
01E3:              .org display_col_off_tab + (4 * 2)
01E3: D2 C4            setb DISPLAY_C2
01E5: 22               ret
01E7:              .org display_col_off_tab + (4 * 3)
01E7: D2 A1            setb DISPLAY_C3
01E9: 22               ret
01EB:              .org display_col_off_tab + (4 * 4)
01EB: D2 94            setb DISPLAY_C4
01ED: 22               ret
01EF:              .org display_col_off_tab + (4 * 5)
01EF: D2 A2            setb DISPLAY_C5
01F1: 22               ret
01F3:              .org display_col_off_tab + (4 * 6)
01F3: D2 C1            setb DISPLAY_C6
01F5: 22               ret
01F7:              .org display_col_off_tab + (4 * 7)
01F7: D2 95            setb DISPLAY_C7
01F9: 22               ret
                   
                   ; Disable all columns
                   display_col_off_all:
01FA: D2 A4            setb    DISPLAY_C0
01FC: D2 A0            setb    DISPLAY_C1
01FE: D2 C4            setb    DISPLAY_C2
0200: D2 A1            setb    DISPLAY_C3
0202: D2 94            setb    DISPLAY_C4
0204: D2 A2            setb    DISPLAY_C5
0206: D2 C1            setb    DISPLAY_C6
0208: D2 95            setb    DISPLAY_C7
020A: 22               ret
                   
                   ; Disable all rows
                   display_row_off_all:
020B: C2 A6            clr     DISPLAY_R0
020D: C2 C5            clr     DISPLAY_R1
020F: C2 84            clr     DISPLAY_R2
0211: C2 A7            clr     DISPLAY_R3
0213: C2 80            clr     DISPLAY_R4
0215: C2 83            clr     DISPLAY_R5
0217: C2 81            clr     DISPLAY_R6
0219: C2 82            clr     DISPLAY_R7
021B: C2 85            clr     DISPLAY_R8
021D: C2 87            clr     DISPLAY_R9
021F: C2 93            clr     DISPLAY_R10
0221: C2 86            clr     DISPLAY_R11
0223: C2 90            clr     DISPLAY_R12
0225: C2 92            clr     DISPLAY_R13
0227: C2 91            clr     DISPLAY_R14
0229: C2 96            clr     DISPLAY_R15
022B: 22               ret
                   
                   ; Enable a segment of 7-segment display determined by A
                   ; UB if A >= 8
                   ; Uses A, DPTR
                   display_ss_segment_on:
022C: 90 02 32         mov     DPTR, #display_ss_segment_on_tab
022F: 23               rl      A
0230: 23               rl      A
0231: 73               jmp     @A + DPTR
                   display_ss_segment_on_tab:
                   ; print('\n'.join(f".org display_ss_segment_on_tab + (4 * SS
0232:              .org display_ss_segment_on_tab + (4 * SS_SEGN_A)
0232: D2 C1            setb SMG_A
0234: 22               ret
0236:              .org display_ss_segment_on_tab + (4 * SS_SEGN_B)
0236: D2 A4            setb SMG_B
0238: 22               ret
023A:              .org display_ss_segment_on_tab + (4 * SS_SEGN_C)
023A: D2 A1            setb SMG_C
023C: 22               ret
023E:              .org display_ss_segment_on_tab + (4 * SS_SEGN_D)
023E: D2 A0            setb SMG_D
0240: 22               ret
0242:              .org display_ss_segment_on_tab + (4 * SS_SEGN_E)
0242: D2 C4            setb SMG_E
0244: 22               ret
0246:              .org display_ss_segment_on_tab + (4 * SS_SEGN_F)
0246: D2 A2            setb SMG_F
0248: 22               ret
024A:              .org display_ss_segment_on_tab + (4 * SS_SEGN_G)
024A: D2 94            setb SMG_G
024C: 22               ret
024E:              .org display_ss_segment_on_tab + (4 * SS_SEGN_DP)
024E: D2 95            setb SMG_DP
0250: 22               ret
                   
                   ; Disable a segment of 7-segment display determined by A
                   ; UB if A >= 8
                   ; Uses A, DPTR
                   display_ss_segment_off:
0251: 90 02 57         mov     DPTR, #display_ss_segment_off_tab
0254: 23               rl      A
0255: 23               rl      A
0256: 73               jmp     @A + DPTR
                   display_ss_segment_off_tab:
                   ; print('\n'.join(f".org display_ss_segment_off_tab + (4 * S
0257:              .org display_ss_segment_off_tab + (4 * SS_SEGN_A)
0257: C2 C1            clr SMG_A
0259: 22               ret
025B:              .org display_ss_segment_off_tab + (4 * SS_SEGN_B)
025B: C2 A4            clr SMG_B
025D: 22               ret
025F:              .org display_ss_segment_off_tab + (4 * SS_SEGN_C)
025F: C2 A1            clr SMG_C
0261: 22               ret
0263:              .org display_ss_segment_off_tab + (4 * SS_SEGN_D)
0263: C2 A0            clr SMG_D
0265: 22               ret
0267:              .org display_ss_segment_off_tab + (4 * SS_SEGN_E)
0267: C2 C4            clr SMG_E
0269: 22               ret
026B:              .org display_ss_segment_off_tab + (4 * SS_SEGN_F)
026B: C2 A2            clr SMG_F
026D: 22               ret
026F:              .org display_ss_segment_off_tab + (4 * SS_SEGN_G)
026F: C2 94            clr SMG_G
0271: 22               ret
0273:              .org display_ss_segment_off_tab + (4 * SS_SEGN_DP)
0273: C2 95            clr SMG_DP
0275: 22               ret
                   
                   ; Disable all 7-segment display segments
                   display_ss_segment_off_all:
0276: C2 C1            clr SMG_A
0278: C2 A4            clr SMG_B
027A: C2 A1            clr SMG_C
027C: C2 A0            clr SMG_D
027E: C2 C4            clr SMG_E
0280: C2 A2            clr SMG_F
0282: C2 94            clr SMG_G
0284: C2 95            clr SMG_DP
0286: 22               ret
                   
                   ; Disable all 7-segment display digits
                   display_ss_digit_off_all:
0287: D2 A3            setb    DISPLAY_D0
0289: D2 A5            setb    DISPLAY_D1
028B: D2 C2            setb    DISPLAY_D2
028D: 22               ret
                   
                   ; Enable a 7-segment digit determined by A
                   ; UB if A >= 3
                   ; Uses A, DPTR
                   display_ss_digit_on:
028E: 90 02 94         mov     DPTR, #display_ss_digit_on_tab
0291: 23               rl      A
0292: 23               rl      A
0293: 73               jmp     @A + DPTR
                   display_ss_digit_on_tab:
                   ; print('\n'.join(f".org display_ss_digit_on_tab + (4 * {i})
0294:              .org display_ss_digit_on_tab + (4 * 0)
0294: C2 A3            clr DISPLAY_D0
0296: 22               ret
0298:              .org display_ss_digit_on_tab + (4 * 1)
0298: C2 A5            clr DISPLAY_D1
029A: 22               ret
029C:              .org display_ss_digit_on_tab + (4 * 2)
029C: C2 C2            clr DISPLAY_D2
029E: 22               ret
                   
                   
                   ;
                   ; Input
                   ;
                   
                   
                   
                   ; Checks input, updates btns_pressed, btns_just_pressed
                   ; Uses A, R0
                   input_check:
029F: E4               clr     A
02A0: 30 B7 02         jnb     BTN_OK, _input_check_no_ok
02A3: D2 E0            setb    ACC.0
                   _input_check_no_ok:
02A5: 20 B2 02         jb      BTN_UP, _input_check_no_up
02A8: D2 E1            setb    ACC.1
                   _input_check_no_up:
02AA: 20 B6 02         jb      BTN_DOWN, _input_check_no_down
02AD: D2 E2            setb    ACC.2
                   _input_check_no_down:
02AF: 20 B3 02         jb      BTN_RIGHT, _input_check_no_right
02B2: D2 E3            setb    ACC.3
                   _input_check_no_right:
02B4: 20 B0 02         jb      BTN_LEFT, _input_check_no_left
02B7: D2 E4            setb    ACC.4
                   _input_check_no_left:
02B9: F8               mov     R0, A                           ; R0 = pressed_n
02BA: 45 66            orl     A, btns_denoise_buffer + 3
02BC: 45 65            orl     A, btns_denoise_buffer + 2
02BE: 45 64            orl     A, btns_denoise_buffer + 1
02C0: 45 63            orl     A, btns_denoise_buffer + 0
02C2: 85 65 66         mov     btns_denoise_buffer + 3, btns_denoise_buffer + 2
02C5: 85 64 65         mov     btns_denoise_buffer + 2, btns_denoise_buffer + 1
02C8: 85 63 64         mov     btns_denoise_buffer + 1, btns_denoise_buffer + 0
02CB: 88 63            mov     btns_denoise_buffer + 0, R0
02CD: F8               mov     R0, A                           ; R0 = A = press
02CE: E5 2E            mov     A, btns_pressed
02D0: F4               cpl     A
02D1: 58               anl     A, R0                           ; A = pressed & 
02D2: 42 2D            orl     btns_just_pressed, A
                   
02D4: E8               mov     A, R0
02D5: F5 2E            mov     btns_pressed, A
02D7: 52 2D            anl     btns_just_pressed, A            ; btns_just_pres
                                                               ; Non-pressed bu
02D9: 22               ret
                   
                   
                   
                   ;
                   ; Display main (co)routine
                   ;
                   
                   ; Run one step of display coroutine
                   display_coro_run:
02DA: C0 7D            push    display_coro_pcl
02DC: C0 7E            push    display_coro_pch
02DE: 22               ret
                   
                   ; End a step of display coroutine
                   ; MUST be called directly from display coroutine only
                   display_coro_yield:
02DF: D0 7E            pop     display_coro_pch
02E1: D0 7D            pop     display_coro_pcl
02E3: 22               ret
                   
                   ; Display coroutine start
                   ; Calling this will initialize display coroutine and return
                   display_coro_start:
02E4: 51 0B            acall   display_row_off_all
                   
02E6: 51 DF            acall   display_coro_yield
                   
02E8: 75 67 01         mov     display_blink_cnt, #1
                   display_coro_loop:
                   
                   ; Blinking state update
02EB: D5 67 05         djnz    display_blink_cnt, _display_coro_blnk_noover
02EE: B2 78            cpl     display_blink_on
02F0: 75 67 0A         mov     display_blink_cnt, #10
                   _display_coro_blnk_noover:
                   
                   ; 7-segment display
02F3: 12 02 87         lcall   display_ss_digit_off_all
02F6: 12 02 76         lcall   display_ss_segment_off_all
02F9: E4               clr     A
                   _display_coro_ss_digits_loop:
02FA: FF               mov     R7, A                       ; R7 = digit index
02FB: 12 02 8E         lcall   display_ss_digit_on
02FE: 74 7A            mov     A, #ss_value_0
0300: 2F               add     A, R7
0301: F8               mov     R0, A
0302: 86 06            mov     6, @R0                      ; R6 = segment bits
                   
0304: E4               clr     A
                   _display_coro_ss_segments_loop:
0305: FD               mov     R5, A                       ; R5 = segment index
0306: EE               mov     A, R6
0307: 13               rrc     A
0308: FE               mov     R6, A
0309: 50 04            jnc     _display_coro_ss_segment_off
030B: ED               mov     A, R5
030C: 12 02 2C         lcall   display_ss_segment_on
                   _display_coro_ss_segment_off:
030F: 12 02 DF         lcall   display_coro_yield
                   
0312: ED               mov     A, R5
0313: 12 02 51         lcall   display_ss_segment_off
                   
0316: ED               mov     A, R5
0317: 04               inc     A
0318: B4 08 EA         cjne    A, #8, _display_coro_ss_segments_loop
                   
031B: 12 02 87         lcall   display_ss_digit_off_all
031E: EF               mov     A, R7
031F: 04               inc     A
0320: B4 03 D7         cjne    A, #3, _display_coro_ss_digits_loop
                   
                   
                   ; Matrix display
                   
                   ; Sequence
                   
0323: 12 01 FA         lcall   display_col_off_all
                   
0326: E4               clr     A
                   _display_notes_loop:
0327: FD               mov     R5, A                       ; R5 = note index
                   
0328: B5 68 03         cjne    A, seq_edit_cursor, _display_notes_notedit
032B: 30 78 1E         jnb     display_blink_on, _display_note_end
                   _display_notes_notedit:
032E: 12 01 26         lcall   display_row_on
                   
0331: ED               mov     A, R5
0332: 24 6A            add     A, #seq_notes
0334: F8               mov     R0, A
0335: E6               mov     A, @R0                      ; A = current note
0336: 54 07            anl     A, #0x07                    ; (just in case...)
0338: B4 00 05         cjne    A, #0, _display_note_visible
033B: 12 02 DF         lcall   display_coro_yield
033E: 80 0C            sjmp    _display_note_end
                   _display_note_visible:
0340: 14               dec     A
0341: FE               mov     R6, A                       ; R6 = note column
0342: 12 01 B0         lcall   display_col_on
0345: 12 02 DF         lcall   display_coro_yield
0348: EE               mov     A, R6
0349: 12 01 D5         lcall   display_col_off
                   _display_note_end:
034C: ED               mov     A, R5
034D: 12 01 6B         lcall   display_row_off
                   
0350: ED               mov     A, R5
0351: 04               inc     A
0352: B4 10 D2         cjne    A, #16, _display_notes_loop
                   
                   ; Playback cursor
                   
0355: C2 95            clr     DISPLAY_C7
0357: E5 69            mov     A, seq_cursor
0359: 54 0F            anl     A, #0x0f
035B: FD               mov     R5, A
035C: 12 01 26         lcall   display_row_on
035F: 12 02 DF         lcall   display_coro_yield
0362: ED               mov     A, R5
0363: 12 01 6B         lcall   display_row_off
0366: D2 95            setb    DISPLAY_C7
                   
                   
                   ; End of display coroutine loop
0368: 02 02 EB         ljmp    display_coro_loop
                   
                   
                   
                   ;
                   ; Animation (on 7-segment display)
                   ;
                   
                   
                   animation_init:
036B: 75 61 00         mov     anim_ptr, #0
036E: 80 0A            sjmp    _animation_update_1
                   
                   animation_frame:
0370: E5 69            mov     A, seq_cursor
0372: B4 00 02         cjne    A, #0, _animation_update    ; Restart animation 
0375: 80 F4            sjmp    animation_init
                   
                   _animation_update:
0377: D5 62 1B         djnz    anim_counter, _anim_no_change
                   _animation_update_1:
                   
037A: 90 03 96         mov     DPTR, #animation_data
037D: A8 61            mov     R0, anim_ptr
037F: E8               mov     A, R0
0380: 93               movc    A, @A + DPTR
0381: F5 62            mov     anim_counter, A
0383: 08               inc     R0
0384: E8               mov     A, R0
0385: 93               movc    A, @A + DPTR
0386: F5 7A            mov     ss_value_0, A
0388: 08               inc     R0
0389: E8               mov     A, R0
038A: 93               movc    A, @A + DPTR
038B: F5 7B            mov     ss_value_1, A
038D: 08               inc     R0
038E: E8               mov     A, R0
038F: 93               movc    A, @A + DPTR
0390: F5 7C            mov     ss_value_2, A
0392: 08               inc     R0
0393: 88 61            mov     anim_ptr, R0
                   
                   
                   _anim_no_change:
0395: 22               ret
                   
                   animation_data:
0396: 08 3F 1C 3F 
                       .db 8, SS_CHR_0, SS_CHR_U_LOW, SS_CHR_0         ; OuO
039A: 01 40 1C 40 
                       .db 1, SS_CHR_MINUS, SS_CHR_U_LOW, SS_CHR_MINUS ; -u-
039E: 08 3F 1C 3F 
                       .db 8, SS_CHR_0, SS_CHR_U_LOW, SS_CHR_0         ; 0u0
                   
                   ;
                   ; Sound control routines
                   ;
                   
                   
                   ; Play current note based on seq_* (and TODO current scale)
                   ; Uses A, DPTR
                   setup_current_note:
03A2: 74 6A            mov     A, #seq_notes
03A4: 25 69            add     A, seq_cursor
03A6: F8               mov     R0, A
03A7: E6               mov     A, @R0
03A8: 54 07            anl     A, #0x07
03AA: B4 00 02         cjne    A, #0, _setup_current_note_nonzero
03AD: 80 06            sjmp    mute_sound
                   _setup_current_note_nonzero:
03AF: 14               dec     A
                   
03B0: 24 30            add     A, #48 ; TODO: Adjust to scale
                   
03B2: F8               mov     R0, A
03B3: 80 08            sjmp    setup_note
                   
                   
                   ; Stop playing any sound
                   mute_sound:
03B5: C2 8C            clr     TR0
03B7: 53 8F FE         anl     INT_CLKO, #(0xFF - INT_CLKO_T0CLKO)     ; use be
03BA: D2 B5            setb    BEEPER                                  ; pull b
03BC: 22               ret
                   
                   
                   ; Setup T0 to play note determined by R0.
                   ; UB if R0 > 127
                   ; Uses A, DPTR
                   setup_note:
03BD: 90 03 DB         mov     DPTR, #notes_table_th
03C0: E8               mov     A, R0
03C1: 93               movc    A, @A+DPTR
03C2: F5 8C            mov     TH0, A
                   
03C4: 90 04 5B         mov     DPTR, #notes_table_tl
03C7: E8               mov     A, R0
03C8: 93               movc    A, @A+DPTR
03C9: F5 8A            mov     TL0, A
                   
03CB: 43 8F 01         orl     INT_CLKO, #INT_CLKO_T0CLKO              ; toggle
                       ;setb    TR0
                   
03CE: B8 2B 04         cjne    R0, #FIRST_X12_NOTE_ID, setup_note_ne
                   setup_note_need_x12:
03D1: 43 8E 80         orl     AUXR, #AUXR_T0x12
03D4: 22               ret
                   setup_note_ne:
03D5: 50 FA            jnc     setup_note_need_x12  ; if R0 > #FIRST_X12_NOTE_I
03D7: 53 8E 7F         anl     AUXR, #(0xFF - AUXR_T0x12)
03DA: 22               ret
                   
                   
                   
                   ; Note tables
                   ; 1) T2H for each note
                   notes_table_th:
03DB: 02               .db 0x2         ; Cs0
03DC: 10               .db 0x10        ; D0
03DD: 1E               .db 0x1e        ; Ds0
03DE: 2A               .db 0x2a        ; E0
03DF: 36               .db 0x36        ; F0
03E0: 41               .db 0x41        ; Fs0
03E1: 4C               .db 0x4c        ; G0
03E2: 56               .db 0x56        ; Gs0
03E3: 60               .db 0x60        ; A0
03E4: 69               .db 0x69        ; As0
03E5: 71               .db 0x71        ; B0
03E6: 79               .db 0x79        ; C1
03E7: 81               .db 0x81        ; Cs1
03E8: 88               .db 0x88        ; D1
03E9: 8F               .db 0x8f        ; Ds1
03EA: 95               .db 0x95        ; E1
03EB: 9B               .db 0x9b        ; F1
03EC: A0               .db 0xa0        ; Fs1
03ED: A6               .db 0xa6        ; G1
03EE: AB               .db 0xab        ; Gs1
03EF: B0               .db 0xb0        ; A1
03F0: B4               .db 0xb4        ; As1
03F1: B8               .db 0xb8        ; B1
03F2: BC               .db 0xbc        ; C2
03F3: C0               .db 0xc0        ; Cs2
03F4: C4               .db 0xc4        ; D2
03F5: C7               .db 0xc7        ; Ds2
03F6: CA               .db 0xca        ; E2
03F7: CD               .db 0xcd        ; F2
03F8: D0               .db 0xd0        ; Fs2
03F9: D3               .db 0xd3        ; G2
03FA: D5               .db 0xd5        ; Gs2
03FB: D8               .db 0xd8        ; A2
03FC: DA               .db 0xda        ; As2
03FD: DC               .db 0xdc        ; B2
03FE: DE               .db 0xde        ; C3
03FF: E0               .db 0xe0        ; Cs3
0400: E2               .db 0xe2        ; D3
0401: E3               .db 0xe3        ; Ds3
0402: E5               .db 0xe5        ; E3
0403: E6               .db 0xe6        ; F3
0404: E8               .db 0xe8        ; Fs3
0405: E9               .db 0xe9        ; G3
0406: 02               .db 0x2         ; Gs3
0407: 10               .db 0x10        ; A3
0408: 1D               .db 0x1d        ; As3
0409: 2A               .db 0x2a        ; B3
040A: 36               .db 0x36        ; C4
040B: 41               .db 0x41        ; Cs4
040C: 4C               .db 0x4c        ; D4
040D: 56               .db 0x56        ; Ds4
040E: 60               .db 0x60        ; E4
040F: 68               .db 0x68        ; F4
0410: 71               .db 0x71        ; Fs4
0411: 79               .db 0x79        ; G4
0412: 81               .db 0x81        ; Gs4
0413: 88               .db 0x88        ; A4
0414: 8E               .db 0x8e        ; As4
0415: 95               .db 0x95        ; B4
0416: 9B               .db 0x9b        ; C5
0417: A0               .db 0xa0        ; Cs5
0418: A6               .db 0xa6        ; D5
0419: AB               .db 0xab        ; Ds5
041A: B0               .db 0xb0        ; E5
041B: B4               .db 0xb4        ; F5
041C: B8               .db 0xb8        ; Fs5
041D: BC               .db 0xbc        ; G5
041E: C0               .db 0xc0        ; Gs5
041F: C4               .db 0xc4        ; A5
0420: C7               .db 0xc7        ; As5
0421: CA               .db 0xca        ; B5
0422: CD               .db 0xcd        ; C6
0423: D0               .db 0xd0        ; Cs6
0424: D3               .db 0xd3        ; D6
0425: D5               .db 0xd5        ; Ds6
0426: D8               .db 0xd8        ; E6
0427: DA               .db 0xda        ; F6
0428: DC               .db 0xdc        ; Fs6
0429: DE               .db 0xde        ; G6
042A: E0               .db 0xe0        ; Gs6
042B: E2               .db 0xe2        ; A6
042C: E3               .db 0xe3        ; As6
042D: E5               .db 0xe5        ; B6
042E: E6               .db 0xe6        ; C7
042F: E8               .db 0xe8        ; Cs7
0430: E9               .db 0xe9        ; D7
0431: EA               .db 0xea        ; Ds7
0432: EC               .db 0xec        ; E7
0433: ED               .db 0xed        ; F7
0434: EE               .db 0xee        ; Fs7
0435: EF               .db 0xef        ; G7
0436: F0               .db 0xf0        ; Gs7
0437: F1               .db 0xf1        ; A7
0438: F1               .db 0xf1        ; As7
0439: F2               .db 0xf2        ; B7
043A: F3               .db 0xf3        ; C8
043B: F4               .db 0xf4        ; Cs8
043C: F4               .db 0xf4        ; D8
043D: F5               .db 0xf5        ; Ds8
043E: F6               .db 0xf6        ; E8
043F: F6               .db 0xf6        ; F8
0440: F7               .db 0xf7        ; Fs8
0441: F7               .db 0xf7        ; G8
0442: F8               .db 0xf8        ; Gs8
0443: F8               .db 0xf8        ; A8
0444: F8               .db 0xf8        ; As8
0445: F9               .db 0xf9        ; B8
0446: F9               .db 0xf9        ; C9
0447: FA               .db 0xfa        ; Cs9
0448: FA               .db 0xfa        ; D9
0449: FA               .db 0xfa        ; Ds9
044A: FB               .db 0xfb        ; E9
044B: FB               .db 0xfb        ; F9
044C: FB               .db 0xfb        ; Fs9
044D: FB               .db 0xfb        ; G9
044E: FC               .db 0xfc        ; Gs9
044F: FC               .db 0xfc        ; A9
0450: FC               .db 0xfc        ; As9
0451: FC               .db 0xfc        ; B9
0452: FC               .db 0xfc        ; C10
0453: FD               .db 0xfd        ; Cs10
0454: FD               .db 0xfd        ; D10
0455: FD               .db 0xfd        ; Ds10
0456: FD               .db 0xfd        ; E10
0457: FD               .db 0xfd        ; F10
0458: FD               .db 0xfd        ; Fs10
0459: FD               .db 0xfd        ; G10
045A: FE               .db 0xfe        ; Gs10
                   ; 2) T2L for each note
                   notes_table_tl:
045B: 55               .db 0x55        ; Cs0
045C: 92               .db 0x92        ; D0
045D: 02               .db 0x2         ; Ds0
045E: B1               .db 0xb1        ; E0
045F: AA               .db 0xaa        ; F0
0460: F7               .db 0xf7        ; Fs0
0461: A1               .db 0xa1        ; G0
0462: B2               .db 0xb2        ; Gs0
0463: 33               .db 0x33        ; A0
0464: 2B               .db 0x2b        ; As0
0465: A2               .db 0xa2        ; B0
0466: A0               .db 0xa0        ; C1
0467: 2A               .db 0x2a        ; Cs1
0468: 49               .db 0x49        ; D1
0469: 01               .db 0x1         ; Ds1
046A: 58               .db 0x58        ; E1
046B: 55               .db 0x55        ; F1
046C: FB               .db 0xfb        ; Fs1
046D: 51               .db 0x51        ; G1
046E: 59               .db 0x59        ; Gs1
046F: 19               .db 0x19        ; A1
0470: 95               .db 0x95        ; As1
0471: D1               .db 0xd1        ; B1
0472: D0               .db 0xd0        ; C2
0473: 95               .db 0x95        ; Cs2
0474: 24               .db 0x24        ; D2
0475: 80               .db 0x80        ; Ds2
0476: AC               .db 0xac        ; E2
0477: AA               .db 0xaa        ; F2
0478: 7E               .db 0x7e        ; Fs2
0479: 28               .db 0x28        ; G2
047A: AD               .db 0xad        ; Gs2
047B: 0D               .db 0xd         ; A2
047C: 4B               .db 0x4b        ; As2
047D: 69               .db 0x69        ; B2
047E: 68               .db 0x68        ; C3
047F: 4B               .db 0x4b        ; Cs3
0480: 12               .db 0x12        ; D3
0481: C0               .db 0xc0        ; Ds3
0482: 56               .db 0x56        ; E3
0483: D5               .db 0xd5        ; F3
0484: 3F               .db 0x3f        ; Fs3
0485: 94               .db 0x94        ; G3
0486: 0B               .db 0xb         ; Gs3
0487: 4C               .db 0x4c        ; A3
0488: C0               .db 0xc0        ; As3
0489: 73               .db 0x73        ; B3
048A: 70               .db 0x70        ; C4
048B: C0               .db 0xc0        ; Cs4
048C: 6D               .db 0x6d        ; D4
048D: 81               .db 0x81        ; Ds4
048E: 05               .db 0x5         ; E4
048F: FF               .db 0xff        ; F4
0490: 79               .db 0x79        ; Fs4
0491: 79               .db 0x79        ; G4
0492: 06               .db 0x6         ; Gs4
0493: 26               .db 0x26        ; A4
0494: E0               .db 0xe0        ; As4
0495: 3A               .db 0x3a        ; B4
0496: 38               .db 0x38        ; C5
0497: E0               .db 0xe0        ; Cs5
0498: 37               .db 0x37        ; D5
0499: 41               .db 0x41        ; Ds5
049A: 02               .db 0x2         ; E5
049B: 80               .db 0x80        ; F5
049C: BC               .db 0xbc        ; Fs5
049D: BC               .db 0xbc        ; G5
049E: 83               .db 0x83        ; Gs5
049F: 13               .db 0x13        ; A5
04A0: 70               .db 0x70        ; As5
04A1: 9D               .db 0x9d        ; B5
04A2: 9C               .db 0x9c        ; C6
04A3: 70               .db 0x70        ; Cs6
04A4: 1B               .db 0x1b        ; D6
04A5: A0               .db 0xa0        ; Ds6
04A6: 01               .db 0x1         ; E6
04A7: 40               .db 0x40        ; F6
04A8: 5E               .db 0x5e        ; Fs6
04A9: 5E               .db 0x5e        ; G6
04AA: 41               .db 0x41        ; Gs6
04AB: 0A               .db 0xa         ; A6
04AC: B8               .db 0xb8        ; As6
04AD: 4E               .db 0x4e        ; B6
04AE: CE               .db 0xce        ; C7
04AF: 38               .db 0x38        ; Cs7
04B0: 8E               .db 0x8e        ; D7
04B1: D0               .db 0xd0        ; Ds7
04B2: 01               .db 0x1         ; E7
04B3: 20               .db 0x20        ; F7
04B4: 2F               .db 0x2f        ; Fs7
04B5: 2F               .db 0x2f        ; G7
04B6: 21               .db 0x21        ; Gs7
04B7: 05               .db 0x5         ; A7
04B8: DC               .db 0xdc        ; As7
04B9: A7               .db 0xa7        ; B7
04BA: 67               .db 0x67        ; C8
04BB: 1C               .db 0x1c        ; Cs8
04BC: C7               .db 0xc7        ; D8
04BD: 68               .db 0x68        ; Ds8
04BE: 00               .db 0x0         ; E8
04BF: 90               .db 0x90        ; F8
04C0: 18               .db 0x18        ; Fs8
04C1: 98               .db 0x98        ; G8
04C2: 10               .db 0x10        ; Gs8
04C3: 82               .db 0x82        ; A8
04C4: EE               .db 0xee        ; As8
04C5: 54               .db 0x54        ; B8
04C6: B3               .db 0xb3        ; C9
04C7: 0E               .db 0xe         ; Cs9
04C8: 63               .db 0x63        ; D9
04C9: B4               .db 0xb4        ; Ds9
04CA: 00               .db 0x0         ; E9
04CB: 48               .db 0x48        ; F9
04CC: 8C               .db 0x8c        ; Fs9
04CD: CC               .db 0xcc        ; G9
04CE: 08               .db 0x8         ; Gs9
04CF: 41               .db 0x41        ; A9
04D0: 77               .db 0x77        ; As9
04D1: AA               .db 0xaa        ; B9
04D2: DA               .db 0xda        ; C10
04D3: 07               .db 0x7         ; Cs10
04D4: 32               .db 0x32        ; D10
04D5: 5A               .db 0x5a        ; Ds10
04D6: 80               .db 0x80        ; E10
04D7: A4               .db 0xa4        ; F10
04D8: C6               .db 0xc6        ; Fs10
04D9: E6               .db 0xe6        ; G10
04DA: 04               .db 0x4         ; Gs10
                   ; Index of first note that does need full system frequency
04DB:              .equ    FIRST_X12_NOTE_ID, 43
                   ; Tempo tables
                   ; 1) TH per tempo
                   tempo_table_th:
04DB: 14               .db 0x14        ; 20 bpm
04DC: 32               .db 0x32        ; 40 bpm
04DD: 48               .db 0x48        ; 60 bpm
04DE: 32               .db 0x32        ; 80 bpm
04DF: 76               .db 0x76        ; 120 bpm
04E0: 14               .db 0x14        ; 140 bpm
                   ; 2) TL per tempo
                   tempo_table_tl:
04E1: 95               .db 0x95        ; 20 bpm
04E2: 02               .db 0x2         ; 40 bpm
04E3: E5               .db 0xe5        ; 60 bpm
04E4: 02               .db 0x2         ; 80 bpm
04E5: AC               .db 0xac        ; 120 bpm
04E6: 95               .db 0x95        ; 140 bpm
                   ; 3) Software divider per tempo
                   tempo_table_sd:
04E7: 07               .db 0x7         ; 20 bpm
04E8: 04               .db 0x4         ; 40 bpm
04E9: 03               .db 0x3         ; 60 bpm
04EA: 02               .db 0x2         ; 80 bpm
04EB: 02               .db 0x2         ; 120 bpm
04EC: 01               .db 0x1         ; 140 bpm
