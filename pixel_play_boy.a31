; /d/progs/sdcc/bin/as31.exe -l ./pixel_play_boy.a31


; STC15F2K60S2 specific definitions

.equ    P3M0, 0xB2
.equ    P3M1, 0xB1

.equ    P4, 0xC0
.equ    P4M0, 0xB4
.equ    P4M1, 0xB3

.equ    P5, 0xC8
.equ    P5M0, 0xCA
.equ    P5M1, 0xC9

; | T0x12 | T1x12 | UART_M0x6 | T2R | T2_C/~T | T2x12 | EXTRAM | S1ST2 |
.equ    AUXR,           0x8E
.equ    AUXR_T0x12,     (1 << 7)
.equ    AUXR_T2x12,     (1 << 2)
.equ    AUXR_T2R,       (1 << 4)

; | - | EX4 | EX3 | EX2 | - | T2CLKO | T1CLKO | T0CLKO |
.equ    INT_CLKO,       0x8F
.equ    INT_CLKO_T0CLKO,(1)

; | - | ET4 | ET3 | ES4 | ES3 | ET2 | ESPI | ES2 |
.equ    IE2,            0xAF
.equ    IE2_ET2,        (1 << 2)
.equ    IE2_ET3,        (1 << 5)
.equ    IE2_ET4,        (1 << 6)

.equ    T2L,            0xD7
.equ    T2H,            0xD6





; Board layout definitions

.flag   BEEPER, P3.5        ; Beeper output, DIFFERENT FROM ORIGINAL LAYOUT

; Buttons
.flag BTN_UP,           P3.2
.flag BTN_DOWN,         P3.6
.flag BTN_RIGHT,        P3.3
.flag BTN_LEFT,         P3.0
.flag BTN_OK,           P3.7

; Display rows
.flag DISPLAY_R0,       P2.6
.flag DISPLAY_R1,       P4.5
.flag DISPLAY_R2,       P0.4
.flag DISPLAY_R3,       P2.7
.flag DISPLAY_R4,       P0.0
.flag DISPLAY_R5,       P0.3
.flag DISPLAY_R6,       P0.1
.flag DISPLAY_R7,       P0.2
.flag DISPLAY_R8,       P0.5
.flag DISPLAY_R9,       P0.7
.flag DISPLAY_R10,      P1.3
.flag DISPLAY_R11,      P0.6
.flag DISPLAY_R12,      P1.0
.flag DISPLAY_R13,      P1.2
.flag DISPLAY_R14,      P1.1
.flag DISPLAY_R15,      P3.6

; Display columns
.flag DISPLAY_C0,       P1.5
.flag DISPLAY_C1,       P4.1
.flag DISPLAY_C2,       P2.2
.flag DISPLAY_C3,       P1.4
.flag DISPLAY_C4,       P2.1
.flag DISPLAY_C5,       P4.4
.flag DISPLAY_C6,       P2.0
.flag DISPLAY_C7,       P2.4

; Display digits
.flag DISPLAY_D0,       P2.3
.flag DISPLAY_D1,       P2.5
.flag DISPLAY_D2,       P4.2

; Display digit segments (overlap with matrix columns)
.flag SMG_A,            P4.1
.flag SMG_B,            P2.4
.flag SMG_C,            P2.1
.flag SMG_D,            P2.0
.flag SMG_E,            P4.4
.flag SMG_F,            P2.2
.flag SMG_G,            P1.4

.flag SMG_DOT,          P1.5 ; Missing



; Memory layout

.equ    tempo_tick, 0x7f      ; Tempo tick counter


.equ    _test_note, 0x6F




; Interrupt handlers

.org 0x0000             ; Reset handler
    ljmp    main

;.org 0x000B             ; Timer 0 interrupt
;    reti

.org 0x001B             ; Timer 1 interrupt
    ljmp    t1i

.org 0x0063             ; Timer 2 interrupt
    reti

t1i:
    djnz    tempo_tick, t1i_ret ; if (--tempo_tick) goto t1i_ret

    push    ACC
    push    0
    push    DPL
    push    DPH

    mov     tempo_tick, #7
    inc     _test_note
    anl     _test_note, #0b01111111
    mov     R0, _test_note
    lcall   setup_note

    pop     DPH
    pop     DPL
    pop     0
    pop     ACC
t1i_ret:
    reti





; Entry point

main:

; Hardware initialization

; Stack init
    mov     SP, #0x7F   ; Place stack in upper half of internal RAM
                        ; (upper 128 bytes of 256 bytes).


; Beeper init

    mov     R0, #0
    lcall   setup_note
    
; Tempo counter init
    mov     TH1, 0x14
    mov     TL1, 0x95
    orl     IE, #(1 << 3)
    setb    TR1
    mov     tempo_tick, #7

;
    mov _test_note, #1


    setb    EA          ; Enable interrupts
    sjmp    *




; Enable display row determined by A
; UB if A >= 16
; Uses A, DPTR
display_row_on:
    mov     DPTR, #display_row_on_tab
    rl      A
    rl      A
    jmp     @A + DPTR   ; jmp display_row_on_tab + row * 4
display_row_on_tab:
    setb    DISPLAY_R0
    ret
; print('\n'.join(f".org display_row_on_tab + (4 * {i})\n    setb DISPLAY_R{i}\n    ret" for i in range(1, 16)))
.org display_row_on_tab + (4 * 1)
    setb DISPLAY_R1
    ret
.org display_row_on_tab + (4 * 2)
    setb DISPLAY_R2
    ret
.org display_row_on_tab + (4 * 3)
    setb DISPLAY_R3
    ret
.org display_row_on_tab + (4 * 4)
    setb DISPLAY_R4
    ret
.org display_row_on_tab + (4 * 5)
    setb DISPLAY_R5
    ret
.org display_row_on_tab + (4 * 6)
    setb DISPLAY_R6
    ret
.org display_row_on_tab + (4 * 7)
    setb DISPLAY_R7
    ret
.org display_row_on_tab + (4 * 8)
    setb DISPLAY_R8
    ret
.org display_row_on_tab + (4 * 9)
    setb DISPLAY_R9
    ret
.org display_row_on_tab + (4 * 10)
    setb DISPLAY_R10
    ret
.org display_row_on_tab + (4 * 11)
    setb DISPLAY_R11
    ret
.org display_row_on_tab + (4 * 12)
    setb DISPLAY_R12
    ret
.org display_row_on_tab + (4 * 13)
    setb DISPLAY_R13
    ret
.org display_row_on_tab + (4 * 14)
    setb DISPLAY_R14
    ret
.org display_row_on_tab + (4 * 15)
    setb DISPLAY_R15
    ret

; Disable display row determined by A
; UB if A >= 16
; Uses A, DPTR
display_row_off:
    mov     DPTR, #display_row_off_tab
    rl      A
    rl      A
    jmp     @A + DPTR   ; jmp display_row_off_tab + row * 4
display_row_off_tab:
    clr     DISPLAY_R0
    ret
; print('\n'.join(f".org display_row_off_tab + (4 * {i})\n    clr DISPLAY_R{i}\n    ret" for i in range(1, 16)))
.org display_row_off_tab + (4 * 1)
    clr DISPLAY_R1
    ret
.org display_row_off_tab + (4 * 2)
    clr DISPLAY_R2
    ret
.org display_row_off_tab + (4 * 3)
    clr DISPLAY_R3
    ret
.org display_row_off_tab + (4 * 4)
    clr DISPLAY_R4
    ret
.org display_row_off_tab + (4 * 5)
    clr DISPLAY_R5
    ret
.org display_row_off_tab + (4 * 6)
    clr DISPLAY_R6
    ret
.org display_row_off_tab + (4 * 7)
    clr DISPLAY_R7
    ret
.org display_row_off_tab + (4 * 8)
    clr DISPLAY_R8
    ret
.org display_row_off_tab + (4 * 9)
    clr DISPLAY_R9
    ret
.org display_row_off_tab + (4 * 10)
    clr DISPLAY_R10
    ret
.org display_row_off_tab + (4 * 11)
    clr DISPLAY_R11
    ret
.org display_row_off_tab + (4 * 12)
    clr DISPLAY_R12
    ret
.org display_row_off_tab + (4 * 13)
    clr DISPLAY_R13
    ret
.org display_row_off_tab + (4 * 14)
    clr DISPLAY_R14
    ret
.org display_row_off_tab + (4 * 15)
    clr DISPLAY_R15
    ret


; Stop playing any sound
mute_sound:
    clr     TR0
    anl     INT_CLKO, #(0xFF - INT_CLKO_T0CLKO)     ; use beeper pin as GPIO
    setb    BEEPER                                  ; pull beeper pin up, so beeper is de-energized
    ret


; Setup T0 to play note determined by R0.
; UB if R0 > 127
; Uses A, DPTR
setup_note:
    mov     DPTR, #notes_table_th
    mov     A, R0
    movc    A, @A+DPTR
    mov     TH0, A

    mov     DPTR, #notes_table_tl
    mov     A, R0
    movc    A, @A+DPTR
    mov     TL0, A

    orl     INT_CLKO, #INT_CLKO_T0CLKO              ; toggle beeper pin on T0 overflow
    setb    TR0

    cjne    R0, #FIRST_X12_NOTE_ID, setup_note_ne
setup_note_need_x12:
    orl     AUXR, #AUXR_T0x12
    ret
setup_note_ne:
    jnc     setup_note_need_x12  ; if R0 > #FIRST_X12_NOTE_ID
    anl     AUXR, #(0xFF - AUXR_T0x12)
    ret



; Note tables
; 1) T2H for each note
notes_table_th:
    .db 0x2         ; Cs0
    .db 0x10        ; D0
    .db 0x1e        ; Ds0
    .db 0x2a        ; E0
    .db 0x36        ; F0
    .db 0x41        ; Fs0
    .db 0x4c        ; G0
    .db 0x56        ; Gs0
    .db 0x60        ; A0
    .db 0x69        ; As0
    .db 0x71        ; B0
    .db 0x79        ; C1
    .db 0x81        ; Cs1
    .db 0x88        ; D1
    .db 0x8f        ; Ds1
    .db 0x95        ; E1
    .db 0x9b        ; F1
    .db 0xa0        ; Fs1
    .db 0xa6        ; G1
    .db 0xab        ; Gs1
    .db 0xb0        ; A1
    .db 0xb4        ; As1
    .db 0xb8        ; B1
    .db 0xbc        ; C2
    .db 0xc0        ; Cs2
    .db 0xc4        ; D2
    .db 0xc7        ; Ds2
    .db 0xca        ; E2
    .db 0xcd        ; F2
    .db 0xd0        ; Fs2
    .db 0xd3        ; G2
    .db 0xd5        ; Gs2
    .db 0xd8        ; A2
    .db 0xda        ; As2
    .db 0xdc        ; B2
    .db 0xde        ; C3
    .db 0xe0        ; Cs3
    .db 0xe2        ; D3
    .db 0xe3        ; Ds3
    .db 0xe5        ; E3
    .db 0xe6        ; F3
    .db 0xe8        ; Fs3
    .db 0xe9        ; G3
    .db 0x2         ; Gs3
    .db 0x10        ; A3
    .db 0x1d        ; As3
    .db 0x2a        ; B3
    .db 0x36        ; C4
    .db 0x41        ; Cs4
    .db 0x4c        ; D4
    .db 0x56        ; Ds4
    .db 0x60        ; E4
    .db 0x68        ; F4
    .db 0x71        ; Fs4
    .db 0x79        ; G4
    .db 0x81        ; Gs4
    .db 0x88        ; A4
    .db 0x8e        ; As4
    .db 0x95        ; B4
    .db 0x9b        ; C5
    .db 0xa0        ; Cs5
    .db 0xa6        ; D5
    .db 0xab        ; Ds5
    .db 0xb0        ; E5
    .db 0xb4        ; F5
    .db 0xb8        ; Fs5
    .db 0xbc        ; G5
    .db 0xc0        ; Gs5
    .db 0xc4        ; A5
    .db 0xc7        ; As5
    .db 0xca        ; B5
    .db 0xcd        ; C6
    .db 0xd0        ; Cs6
    .db 0xd3        ; D6
    .db 0xd5        ; Ds6
    .db 0xd8        ; E6
    .db 0xda        ; F6
    .db 0xdc        ; Fs6
    .db 0xde        ; G6
    .db 0xe0        ; Gs6
    .db 0xe2        ; A6
    .db 0xe3        ; As6
    .db 0xe5        ; B6
    .db 0xe6        ; C7
    .db 0xe8        ; Cs7
    .db 0xe9        ; D7
    .db 0xea        ; Ds7
    .db 0xec        ; E7
    .db 0xed        ; F7
    .db 0xee        ; Fs7
    .db 0xef        ; G7
    .db 0xf0        ; Gs7
    .db 0xf1        ; A7
    .db 0xf1        ; As7
    .db 0xf2        ; B7
    .db 0xf3        ; C8
    .db 0xf4        ; Cs8
    .db 0xf4        ; D8
    .db 0xf5        ; Ds8
    .db 0xf6        ; E8
    .db 0xf6        ; F8
    .db 0xf7        ; Fs8
    .db 0xf7        ; G8
    .db 0xf8        ; Gs8
    .db 0xf8        ; A8
    .db 0xf8        ; As8
    .db 0xf9        ; B8
    .db 0xf9        ; C9
    .db 0xfa        ; Cs9
    .db 0xfa        ; D9
    .db 0xfa        ; Ds9
    .db 0xfb        ; E9
    .db 0xfb        ; F9
    .db 0xfb        ; Fs9
    .db 0xfb        ; G9
    .db 0xfc        ; Gs9
    .db 0xfc        ; A9
    .db 0xfc        ; As9
    .db 0xfc        ; B9
    .db 0xfc        ; C10
    .db 0xfd        ; Cs10
    .db 0xfd        ; D10
    .db 0xfd        ; Ds10
    .db 0xfd        ; E10
    .db 0xfd        ; F10
    .db 0xfd        ; Fs10
    .db 0xfd        ; G10
    .db 0xfe        ; Gs10
; 2) T2L for each note
notes_table_tl:
    .db 0x55        ; Cs0
    .db 0x92        ; D0
    .db 0x2         ; Ds0
    .db 0xb1        ; E0
    .db 0xaa        ; F0
    .db 0xf7        ; Fs0
    .db 0xa1        ; G0
    .db 0xb2        ; Gs0
    .db 0x33        ; A0
    .db 0x2b        ; As0
    .db 0xa2        ; B0
    .db 0xa0        ; C1
    .db 0x2a        ; Cs1
    .db 0x49        ; D1
    .db 0x1         ; Ds1
    .db 0x58        ; E1
    .db 0x55        ; F1
    .db 0xfb        ; Fs1
    .db 0x51        ; G1
    .db 0x59        ; Gs1
    .db 0x19        ; A1
    .db 0x95        ; As1
    .db 0xd1        ; B1
    .db 0xd0        ; C2
    .db 0x95        ; Cs2
    .db 0x24        ; D2
    .db 0x80        ; Ds2
    .db 0xac        ; E2
    .db 0xaa        ; F2
    .db 0x7e        ; Fs2
    .db 0x28        ; G2
    .db 0xad        ; Gs2
    .db 0xd         ; A2
    .db 0x4b        ; As2
    .db 0x69        ; B2
    .db 0x68        ; C3
    .db 0x4b        ; Cs3
    .db 0x12        ; D3
    .db 0xc0        ; Ds3
    .db 0x56        ; E3
    .db 0xd5        ; F3
    .db 0x3f        ; Fs3
    .db 0x94        ; G3
    .db 0xb         ; Gs3
    .db 0x4c        ; A3
    .db 0xc0        ; As3
    .db 0x73        ; B3
    .db 0x70        ; C4
    .db 0xc0        ; Cs4
    .db 0x6d        ; D4
    .db 0x81        ; Ds4
    .db 0x5         ; E4
    .db 0xff        ; F4
    .db 0x79        ; Fs4
    .db 0x79        ; G4
    .db 0x6         ; Gs4
    .db 0x26        ; A4
    .db 0xe0        ; As4
    .db 0x3a        ; B4
    .db 0x38        ; C5
    .db 0xe0        ; Cs5
    .db 0x37        ; D5
    .db 0x41        ; Ds5
    .db 0x2         ; E5
    .db 0x80        ; F5
    .db 0xbc        ; Fs5
    .db 0xbc        ; G5
    .db 0x83        ; Gs5
    .db 0x13        ; A5
    .db 0x70        ; As5
    .db 0x9d        ; B5
    .db 0x9c        ; C6
    .db 0x70        ; Cs6
    .db 0x1b        ; D6
    .db 0xa0        ; Ds6
    .db 0x1         ; E6
    .db 0x40        ; F6
    .db 0x5e        ; Fs6
    .db 0x5e        ; G6
    .db 0x41        ; Gs6
    .db 0xa         ; A6
    .db 0xb8        ; As6
    .db 0x4e        ; B6
    .db 0xce        ; C7
    .db 0x38        ; Cs7
    .db 0x8e        ; D7
    .db 0xd0        ; Ds7
    .db 0x1         ; E7
    .db 0x20        ; F7
    .db 0x2f        ; Fs7
    .db 0x2f        ; G7
    .db 0x21        ; Gs7
    .db 0x5         ; A7
    .db 0xdc        ; As7
    .db 0xa7        ; B7
    .db 0x67        ; C8
    .db 0x1c        ; Cs8
    .db 0xc7        ; D8
    .db 0x68        ; Ds8
    .db 0x0         ; E8
    .db 0x90        ; F8
    .db 0x18        ; Fs8
    .db 0x98        ; G8
    .db 0x10        ; Gs8
    .db 0x82        ; A8
    .db 0xee        ; As8
    .db 0x54        ; B8
    .db 0xb3        ; C9
    .db 0xe         ; Cs9
    .db 0x63        ; D9
    .db 0xb4        ; Ds9
    .db 0x0         ; E9
    .db 0x48        ; F9
    .db 0x8c        ; Fs9
    .db 0xcc        ; G9
    .db 0x8         ; Gs9
    .db 0x41        ; A9
    .db 0x77        ; As9
    .db 0xaa        ; B9
    .db 0xda        ; C10
    .db 0x7         ; Cs10
    .db 0x32        ; D10
    .db 0x5a        ; Ds10
    .db 0x80        ; E10
    .db 0xa4        ; F10
    .db 0xc6        ; Fs10
    .db 0xe6        ; G10
    .db 0x4         ; Gs10
; Index of first note that does need full system frequency
.equ    FIRST_X12_NOTE_ID, 43
; Tempo tables
; 1) TH per tempo
tempo_table_th:
    .db 0x14        ; 20 bpm
    .db 0x32        ; 40 bpm
    .db 0x48        ; 60 bpm
    .db 0x32        ; 80 bpm
    .db 0x76        ; 120 bpm
    .db 0x14        ; 140 bpm
; 2) TL per tempo
tempo_table_tl:
    .db 0x95        ; 20 bpm
    .db 0x2         ; 40 bpm
    .db 0xe5        ; 60 bpm
    .db 0x2         ; 80 bpm
    .db 0xac        ; 120 bpm
    .db 0x95        ; 140 bpm
; 3) Software divider per tempo
tempo_table_sd:
    .db 0x7         ; 20 bpm
    .db 0x4         ; 40 bpm
    .db 0x3         ; 60 bpm
    .db 0x2         ; 80 bpm
    .db 0x2         ; 120 bpm
    .db 0x1         ; 140 bpm
